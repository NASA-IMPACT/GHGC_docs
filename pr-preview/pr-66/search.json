[
  {
    "objectID": "services/apis.html",
    "href": "services/apis.html",
    "title": "APIs",
    "section": "",
    "text": "Please note: while some of our services are already very mature, the US GHG Center platform is currently in the beta phase and will undergo many changes in coming months.",
    "crumbs": [
      "User Services",
      "APIs"
    ]
  },
  {
    "objectID": "services/apis.html#open-source",
    "href": "services/apis.html#open-source",
    "title": "APIs",
    "section": "Open Source",
    "text": "Open Source\nMost of the US GHG Center APIs are hosted out of a single project (ghgc-backend) that combines multiple standalone services.",
    "crumbs": [
      "User Services",
      "APIs"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/tm54dvar-ch4flux-monthgrid-v1_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/tm54dvar-ch4flux-monthgrid-v1_Processing and Verification Report.html",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/emit-ch4plume-v1_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/emit-ch4plume-v1_Processing and Verification Report.html",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/eccodarwin-co2flux-monthgrid-v5_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/eccodarwin-co2flux-monthgrid-v5_Processing and Verification Report.html",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/casagfed-carbonflux-monthgrid-v3_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/casagfed-carbonflux-monthgrid-v3_Processing and Verification Report.html",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/oco2-mip-co2budget-yeargrid-v1_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/oco2-mip-co2budget-yeargrid-v1_Processing and Verification Report.html",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/oco2geos-co2-daygrid-v10r_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/oco2geos-co2-daygrid-v10r_Processing and Verification Report.html",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "cog_transformation/lpjwsl-wetlandch4-monthgrid-v1.html",
    "href": "cog_transformation/lpjwsl-wetlandch4-monthgrid-v1.html",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "",
    "text": "This script was used to transform the Wetland Methane Emissions, LPJ-wsl Model dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nFOLDER_NAME = \"NASA_GSFC_ch4_wetlands_monthly\"\ndirectory = \"ch4_wetlands_monthly\"\n\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(directory):\n    xds = xarray.open_dataset(\n        f\"{directory}/{name}\", engine=\"netcdf4\", decode_times=False\n    )\n    xds = xds.assign_coords(longitude=(((xds.longitude + 180) % 360) - 180)).sortby(\n        \"longitude\"\n    )\n    variable = [var for var in xds.data_vars]\n    filename = name.split(\"/ \")[-1]\n    filename_elements = re.split(\"[_ .]\", filename)\n\n    for time_increment in range(0, len(xds.time)):\n        for var in variable:\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            data = getattr(xds.isel(time=time_increment), var)\n            data = data.isel(latitude=slice(None, None, -1))\n            data = data * 1000\n            data.rio.set_spatial_dims(\"longitude\", \"latitude\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            date = (\n                f\"0{int((data.time.item(0)/732)+1)}\"\n                if len(str(int((data.time.item(0) / 732) + 1))) == 1\n                else f\"{int((data.time.item(0)/732)+1)}\"\n            )\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements[-1] = filename_elements[-1] + date\n            filename_elements.insert(2, var)\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(\n                    temp_file.name,\n                    driver=\"COG\",\n                )\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"{FOLDER_NAME}/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=f\"{FOLDER_NAME}/metadata.json\",\n    )\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/{FOLDER_NAME}/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "cog_transformation/gosat-based-ch4budget-yeargrid-v1.html",
    "href": "cog_transformation/gosat-based-ch4budget-yeargrid-v1.html",
    "title": "GOSAT-based Top-down Methane Budgets",
    "section": "",
    "text": "This script was used to transform the GOSAT-based Top-down Methane Budgets dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nimport rasterio\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nyear_ = datetime(2019, 1, 1)\nfolder_name = \"new_data/CH4-inverse-flux\"\n\nCOG_PROFILE = {\"driver\": \"COG\", \"compress\": \"DEFLATE\"}\n\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(folder_name):\n    ds = xarray.open_dataset(\n        f\"{folder_name}/{name}\",\n        engine=\"netcdf4\",\n    )\n\n    ds = ds.rename({\"dimy\": \"lat\", \"dimx\": \"lon\"})\n    # assign coords from dimensions\n    ds = ds.assign_coords(lon=(((ds.lon + 180) % 360) - 180)).sortby(\"lon\")\n    ds = ds.assign_coords(lat=((ds.lat / 180) * 180) - 90).sortby(\"lat\")\n\n    variable = [var for var in ds.data_vars]\n\n    for var in variable[2:]:\n        filename = name.split(\"/ \")[-1]\n        filename_elements = re.split(\"[_ .]\", filename)\n        data = ds[var]\n        filename_elements.pop()\n        filename_elements.insert(2, var)\n        cog_filename = \"_\".join(filename_elements)\n        # # add extension\n        cog_filename = f\"{cog_filename}.tif\"\n\n        data = data.reindex(lat=list(reversed(data.lat)))\n\n        data.rio.set_spatial_dims(\"lon\", \"lat\")\n        data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n        # generate COG\n        COG_PROFILE = {\"driver\": \"COG\", \"compress\": \"DEFLATE\"}\n\n        with tempfile.NamedTemporaryFile() as temp_file:\n            data.rio.to_raster(temp_file.name, **COG_PROFILE)\n            s3_client.upload_file(\n                Filename=temp_file.name,\n                Bucket=bucket_name,\n                Key=f\"ch4_inverse_flux/{cog_filename}\",\n            )\n\n        files_processed = files_processed._append(\n            {\"file_name\": name, \"COGs_created\": cog_filename},\n            ignore_index=True,\n        )\n\n        print(f\"Generated and saved COG: {cog_filename}\")\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(ds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(ds.dims)}, fp)\n    json.dump({\"data_variables\": list(ds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=\"ch4_inverse_flux/metadata.json\",\n    )\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/ch4_inverse_flux/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "GOSAT-based Top-down Methane Budgets"
    ]
  },
  {
    "objectID": "cog_transformation/oco2geos-co2-daygrid-v10r.html",
    "href": "cog_transformation/oco2geos-co2-daygrid-v10r.html",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "",
    "text": "This script was used to transform the OCO-2 GEOS Column CO₂ Concentrations dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nimport os\n\n\nsession = boto3.Session()\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nFOLDER_NAME = \"earth_data/geos_oco2\"\ns3_folder_name = \"geos-oco2\"\n\nerror_files = []\ncount = 0\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(FOLDER_NAME):\n    try:\n        xds = xarray.open_dataset(f\"{FOLDER_NAME}/{name}\", engine=\"netcdf4\")\n        xds = xds.assign_coords(lon=(((xds.lon + 180) % 360) - 180)).sortby(\"lon\")\n        variable = [var for var in xds.data_vars]\n        filename = name.split(\"/ \")[-1]\n        filename_elements = re.split(\"[_ .]\", filename)\n\n        for time_increment in range(0, len(xds.time)):\n            for var in variable:\n                filename = name.split(\"/ \")[-1]\n                filename_elements = re.split(\"[_ .]\", filename)\n                data = getattr(xds.isel(time=time_increment), var)\n                data = data.isel(lat=slice(None, None, -1))\n                data.rio.set_spatial_dims(\"lon\", \"lat\", inplace=True)\n                data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n                # # insert date of generated COG into filename\n                filename_elements[-1] = filename_elements[-3]\n                filename_elements.insert(2, var)\n                filename_elements.pop(-3)\n                cog_filename = \"_\".join(filename_elements)\n                # # add extension\n                cog_filename = f\"{cog_filename}.tif\"\n\n                with tempfile.NamedTemporaryFile() as temp_file:\n                    data.rio.to_raster(\n                        temp_file.name,\n                        driver=\"COG\",\n                    )\n                    s3_client.upload_file(\n                        Filename=temp_file.name,\n                        Bucket=bucket_name,\n                        Key=f\"{s3_folder_name}/{cog_filename}\",\n                    )\n\n                files_processed = files_processed._append(\n                    {\"file_name\": name, \"COGs_created\": cog_filename},\n                    ignore_index=True,\n                )\n        count += 1\n        print(f\"Generated and saved COG: {cog_filename}\")\n    except OSError:\n        error_files.append(name)\n        pass\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=f\"{s3_folder_name}/metadata.json\",\n    )\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/{s3_folder_name}/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "cog_transformation/tm54dvar-ch4flux-monthgrid-v1.html",
    "href": "cog_transformation/tm54dvar-ch4flux-monthgrid-v1.html",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "",
    "text": "This script was used to transform the TM5-4DVar Isotopic CH₄ Inverse Fluxes dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nfrom datetime import datetime\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nFOLDER_NAME = \"tm5-ch4-inverse-flux\"\n\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(FOLDER_NAME):\n    xds = xarray.open_dataset(f\"{FOLDER_NAME}/{name}\", engine=\"netcdf4\")\n    xds = xds.rename({\"latitude\": \"lat\", \"longitude\": \"lon\"})\n    xds = xds.assign_coords(lon=(((xds.lon + 180) % 360) - 180)).sortby(\"lon\")\n    variable = [var for var in xds.data_vars if \"global\" not in var]\n\n    for time_increment in range(0, len(xds.months)):\n        filename = name.split(\"/ \")[-1]\n        filename_elements = re.split(\"[_ .]\", filename)\n        start_time = datetime(int(filename_elements[-2]), time_increment + 1, 1)\n        for var in variable:\n            data = getattr(xds.isel(months=time_increment), var)\n            data = data.isel(lat=slice(None, None, -1))\n            data.rio.set_spatial_dims(\"lon\", \"lat\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements[-1] = start_time.strftime(\"%Y%m\")\n            filename_elements.insert(2, var)\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(\n                    temp_file.name,\n                    driver=\"COG\",\n                )\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"{FOLDER_NAME}/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=f\"{FOLDER_NAME}/metadata.json\",\n    )\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/{FOLDER_NAME}/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "cog_transformation/odiac-ffco2-monthgrid-v2022.html",
    "href": "cog_transformation/odiac-ffco2-monthgrid-v2022.html",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "",
    "text": "This script was used to transform the ODIAC Fossil Fuel CO₂ Emissions dataset from GeoTIFF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\n\nimport tempfile\nimport boto3\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = \"ghgc-data-store-dev\" # S3 bucket where the COGs are stored after transformation\n\nfold_names = os.listdir(\"ODIAC\")\n\nfiles_processed = pd.DataFrame(columns=[\"file_name\", \"COGs_created\"])   # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor fol_ in fold_names:\n    for name in os.listdir(f\"ODIAC/{fol_}\"):\n        xds = xarray.open_dataarray(f\"ODIAC/{fol_}/{name}\")\n\n        filename = name.split(\"/ \")[-1]\n        filename_elements = re.split(\"[_ .]\", filename)\n        # # insert date of generated COG into filename\n        filename_elements.pop()\n        filename_elements[-1] = fol_ + filename_elements[-1][-2:]\n\n        xds.rio.set_spatial_dims(\"x\", \"y\", inplace=True)\n        xds.rio.write_nodata(-9999, inplace=True)\n        xds.rio.write_crs(\"epsg:4326\", inplace=True)\n\n        cog_filename = \"_\".join(filename_elements)\n        # # add extension\n        cog_filename = f\"{cog_filename}.tif\"\n\n        with tempfile.NamedTemporaryFile() as temp_file:\n            xds.rio.to_raster(\n                temp_file.name,\n                driver=\"COG\",\n            )\n            s3_client.upload_file(\n                Filename=temp_file.name,\n                Bucket=bucket_name,\n                Key=f\"ODIAC_geotiffs_COGs/{cog_filename}\",\n            )\n\n        files_processed = files_processed._append(\n            {\"file_name\": name, \"COGs_created\": cog_filename},\n            ignore_index=True,\n        )\n\n        print(f\"Generated and saved COG: {cog_filename}\")\n\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/ODIAC_COGs/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "cog_transformation/emit-ch4plume-v1.html",
    "href": "cog_transformation/emit-ch4plume-v1.html",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "",
    "text": "This script was used to read the EMIT Methane Point Source Plume Complexes dataset provided in Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\n\n\nsession_ghgc = boto3.session.Session(profile_name=\"ghg_user\")\ns3_client_ghgc = session_ghgc.client(\"s3\")\nsession_veda_smce = boto3.session.Session()\ns3_client_veda_smce = session_veda_smce.client(\"s3\")\n\n# Since the plume emissions were already COGs, we just had to transform their naming convention to be stored in the STAC collection.\nSOURCE_BUCKET_NAME = \"ghgc-data-staging-uah\"\nTARGET_BUCKET_NAME = \"ghgc-data-store-dev\"\n\n\nkeys = []\nresp = s3_client_ghgc.list_objects_v2(Bucket=SOURCE_BUCKET_NAME)\nfor obj in resp[\"Contents\"]:\n    if \"l3\" in obj[\"Key\"]:\n        keys.append(obj[\"Key\"])\n\nfor key in keys:\n    s3_obj = s3_client_ghgc.get_object(Bucket=SOURCE_BUCKET_NAME, Key=key)[\n        \"Body\"\n    ]\n    filename = key.split(\"/\")[-1]\n    filename_elements = re.split(\"[_ .]\", filename)\n\n    date = re.search(\"t\\d\\d\\d\\d\\d\\d\\d\\dt\", key).group(0)\n    filename_elements.insert(-1, date[1:-1])\n    filename_elements.pop()\n\n    cog_filename = \"_\".join(filename_elements)\n    # # add extension\n    cog_filename = f\"{cog_filename}.tif\"\n    s3_client_veda_smce.upload_fileobj(\n        Fileobj=s3_obj,\n        Bucket=TARGET_BUCKET_NAME,\n        Key=f\"plum_data/{cog_filename}\",\n    )\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "cog_transformation/epa-ch4emission-grid-v2express_layers_update.html",
    "href": "cog_transformation/epa-ch4emission-grid-v2express_layers_update.html",
    "title": "Gridded Anthropogenic Methane Emissions Inventory",
    "section": "",
    "text": "This script was used to add concatenated layers and transform Gridded Anthropogenic Methane Emissions Inventory dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nfrom datetime import datetime\nimport numpy as np\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nTrue\n\n\n\n# session = boto3.session.Session()\nsession = boto3.Session(\n    aws_access_key_id=os.environ.get(\"AWS_ACCESS_KEY_ID\"),\n    aws_secret_access_key=os.environ.get(\"AWS_SECRET_ACCESS_KEY\"),\n    aws_session_token=os.environ.get(\"AWS_SESSION_TOKEN\"),\n)\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nFOLDER_NAME = \"../data/epa_emissions_express_extension\"\ns3_folder_name = \"epa_express_extension_Mg_km2_yr\"\n\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(FOLDER_NAME):\n    xds = xarray.open_dataset(f\"{FOLDER_NAME}/{name}\", engine=\"netcdf4\")\n    xds = xds.assign_coords(lon=(((xds.lon + 180) % 360) - 180)).sortby(\"lon\")\n    variable = [var for var in xds.data_vars]\n    new_variables = {\n        \"all-variables\": variable[:-1],\n        \"agriculture\": variable[17:21],\n        \"natural-gas-systems\": variable[10:15] + [variable[26]],\n        \"petroleum-systems\": variable[5:9],\n        \"waste\": variable[21:26],\n        \"coal-mines\": variable[2:5],\n        \"other\": variable[:2] + [variable[9]] + variable[15:17],\n    }\n    filename = name.split(\"/ \")[-1]\n    filename_elements = re.split(\"[_ .]\", filename)\n    start_time = datetime(int(filename_elements[-2]), 1, 1)\n\n    for time_increment in range(0, len(xds.time)):\n        for key, value in new_variables.items():\n            data = np.zeros(dtype=np.float32, shape=(len(xds.lat), len(xds.lon)))\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            for var in value:\n                data = data + getattr(xds.isel(time=time_increment), var)\n            # data = np.round(data / pow(10, 9), 2)\n            data.values[data.values==0] = np.nan\n            data = data*((1/(6.022*pow(10,23)))*(16.04*pow(10,-6))*366*pow(10,10)*86400)\n            data = data.fillna(-9999)\n            data = data.isel(lat=slice(None, None, -1))\n            data.rio.set_spatial_dims(\"lon\", \"lat\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements[-1] = start_time.strftime(\"%Y\")\n            filename_elements.insert(2, key)\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(\n                    temp_file.name,\n                    driver=\"COG\",\n                )\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"{s3_folder_name}/{cog_filename}\",\n                )\n\n                files_processed = files_processed._append(\n                    {\"file_name\": name, \"COGs_created\": cog_filename},\n                    ignore_index=True,\n                )\n\n                print(f\"Generated and saved COG: {cog_filename}\")\nprint(\"Done generating COGs\")\n\nTraceback (most recent call last):\n  File \"_pydevd_bundle/pydevd_cython.pyx\", line 1078, in _pydevd_bundle.pydevd_cython.PyDBFrame.trace_dispatch\n  File \"_pydevd_bundle/pydevd_cython.pyx\", line 297, in _pydevd_bundle.pydevd_cython.PyDBFrame.do_wait_suspend\n  File \"/Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages/debugpy/_vendored/pydevd/pydevd.py\", line 1976, in do_wait_suspend\n    keep_suspended = self._do_wait_suspend(thread, frame, event, arg, suspend_type, from_this_thread, frames_tracker)\n  File \"/Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages/debugpy/_vendored/pydevd/pydevd.py\", line 2011, in _do_wait_suspend\n    time.sleep(0.01)\nKeyboardInterrupt\n\n\nKeyboardInterrupt: \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the TM5-4DVar Isotopic CH₄ Inverse Fluxes Data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#approach",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#approach",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the TM5-4DVar Isotopic CH₄ Inverse Fluxes Data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#about-the-data",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "About the Data",
    "text": "About the Data\nSurface methane (CH₄) emissions are derived from atmospheric measurements of methane and its ¹³C carbon isotope content. Different sources of methane contain different ratios of the two stable isotopologues, ¹²CH₄ and ¹³CH₄. This makes normally indistinguishable collocated sources of methane, say from agriculture and oil and gas exploration, distinguishable. The National Oceanic and Atmospheric Administration (NOAA) collects whole air samples from its global cooperative network of flasks (https://gml.noaa.gov/ccgg/about.html), which are then analyzed for methane and other trace gasses. A subset of those flasks are also analyzed for ¹³C of methane in collaboration with the Institute of Arctic and Alpine Research at the University of Colorado Boulder. Scientists at the National Aeronautics and Space Administration (NASA) and NOAA used those measurements of methane and ¹³C of methane in conjunction with a model of atmospheric circulation to estimate emissions of methane separated by three source types, microbial, fossil and pyrogenic.",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#installing-the-required-libraries",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#installing-the-required-libraries",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "Installing the required libraries",
    "text": "Installing the required libraries\nPlease run the cell below to install the libraries required to run this notebook.\n%pip install requests %pip install folium %pip install rasterstats %pip install pystac_client",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#querying-the-stac-api",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# Please use the collection name similar to the one used in STAC collection.\n# Name of the collection for TM5 CH₄ inverse flux dataset. \ncollection_name = \"tm54dvar-ch4flux-monthgrid-v1\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'tm54dvar-ch4flux-monthgrid-v1',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/tm54dvar-ch4flux-monthgrid-v1/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/tm54dvar-ch4flux-monthgrid-v1'}],\n 'title': 'TM5-4DVar Isotopic CH4 Inverse Fluxes',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'temporal': {'interval': [['1999-01-01T00:00:00+00:00',\n     '2016-12-31T00:00:00+00:00']]}},\n 'license': 'CC-BY-4.0',\n 'keywords': None,\n 'providers': None,\n 'summaries': {'datetime': ['1999-01-01T00:00:00Z', '2016-12-31T00:00:00Z']},\n 'description': 'Global, monthly 1 degree resolution methane emission estimates from microbial, fossil and pyrogenic sources derived using inverse modeling, version 1.',\n 'item_assets': {'total': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Total CH4 Emission',\n   'description': 'Total methane emission from microbial, fossil and pyrogenic sources'},\n  'fossil': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Fossil CH4 Emission',\n   'description': 'Emission of methane from all fossil sources, such as oil and gas activities and coal mining.'},\n  'microbial': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Microbial CH4 Emission',\n   'description': 'Emission of methane from all microbial sources, such as wetlands, agriculture and termites.'},\n  'pyrogenic': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Pyrogenic CH4 Emission',\n   'description': 'Emission of methane from all sources of biomass burning, such as wildfires and crop burning.'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month'}\n\n\nExamining the contents of our collection under the temporal variable, we see that the data is available from January 1999 to December 2016. By looking at the dashboard:time density, we observe that the data is periodic with monthly time density.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 216 items\n\n\n\n# Examining the first item in the collection\nitems[0]\n\n{'id': 'tm54dvar-ch4flux-monthgrid-v1-201612',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/tm54dvar-ch4flux-monthgrid-v1'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/tm54dvar-ch4flux-monthgrid-v1'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/tm54dvar-ch4flux-monthgrid-v1/items/tm54dvar-ch4flux-monthgrid-v1-201612'}],\n 'assets': {'total': {'href': 's3://ghgc-data-store/tm54dvar-ch4flux-monthgrid-v1/methane_emis_total_201612.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Total CH4 Emission',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'Total methane emission from microbial, fossil and pyrogenic sources',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float64',\n     'histogram': {'max': 207.09559432166358,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64446.0, 253.0, 61.0, 16.0, 14.0, 4.0, 3.0, 0.0, 2.0, 1.0]},\n     'statistics': {'mean': 0.7699816366032659,\n      'stddev': 3.8996905358416045,\n      'maximum': 207.09559432166358,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.0, 0.0, -1.0, 90.0, 0.0, 0.0, 1.0]},\n  'fossil': {'href': 's3://ghgc-data-store/tm54dvar-ch4flux-monthgrid-v1/methane_emis_fossil_201612.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Fossil CH4 Emission',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'Emission of methane from all fossil sources, such as oil and gas activities and coal mining.',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float64',\n     'histogram': {'max': 202.8189294183266,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64633.0, 107.0, 35.0, 11.0, 8.0, 3.0, 1.0, 1.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.27127687553584495,\n      'stddev': 2.731411670166909,\n      'maximum': 202.8189294183266,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.0, 0.0, -1.0, 90.0, 0.0, 0.0, 1.0]},\n  'microbial': {'href': 's3://ghgc-data-store/tm54dvar-ch4flux-monthgrid-v1/methane_emis_microbial_201612.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Microbial CH4 Emission',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'Emission of methane from all microbial sources, such as wetlands, agriculture and termites.',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float64',\n     'histogram': {'max': 161.4604621003495,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64610.0, 155.0, 22.0, 5.0, 2.0, 2.0, 2.0, 1.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.46611433673211145,\n      'stddev': 2.2910210071489456,\n      'maximum': 161.4604621003495,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.0, 0.0, -1.0, 90.0, 0.0, 0.0, 1.0]},\n  'pyrogenic': {'href': 's3://ghgc-data-store/tm54dvar-ch4flux-monthgrid-v1/methane_emis_pyrogenic_201612.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Pyrogenic CH4 Emission',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'Emission of methane from all sources of biomass burning, such as wildfires and crop burning.',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float64',\n     'histogram': {'max': 13.432528617097262,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64440.0, 221.0, 78.0, 24.0, 18.0, 8.0, 3.0, 1.0, 1.0, 6.0]},\n     'statistics': {'mean': 0.032590424335309266,\n      'stddev': 0.28279054181617735,\n      'maximum': 13.432528617097262,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.0, 0.0, -1.0, 90.0, 0.0, 0.0, 1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [180, -90],\n    [180, 90],\n    [-180, 90],\n    [-180, -90]]]},\n 'collection': 'tm54dvar-ch4flux-monthgrid-v1',\n 'properties': {'end_datetime': '2016-12-31T00:00:00+00:00',\n  'start_datetime': '2016-12-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\nBelow, we are entering the minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#exploring-changes-in-ch₄-flux-levels-using-the-raster-api",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#exploring-changes-in-ch₄-flux-levels-using-the-raster-api",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "Exploring Changes in CH₄ flux Levels Using the Raster API",
    "text": "Exploring Changes in CH₄ flux Levels Using the Raster API\nIn this notebook, we will explore the global changes of CH₄ flux over time in urban regions. We will visualize the outputs on a map using folium.\n\n# to access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"start_datetime\"][:10]: item for item in items} \nasset_name = \"fossil\" #fossil fuel\n\n\n# Fetching the min and max values for a specific item\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\nNow, we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for 2020 and again for 2019, so that we can visualize each event independently.\n\ncolor_map = \"purd\"\nco2_flux_1 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2016-12-01']['collection']}&item={items['2016-12-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\nco2_flux_1\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=tm54dvar-ch4flux-monthgrid-v1&item=tm54dvar-ch4flux-monthgrid-v1-201612&assets=fossil&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0.0%2C202.8189294183266'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\nco2_flux_2 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['1999-12-01']['collection']}&item={items['1999-12-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\nco2_flux_2\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=tm54dvar-ch4flux-monthgrid-v1&item=tm54dvar-ch4flux-monthgrid-v1-199912&assets=fossil&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0.0%2C202.8189294183266'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#visualizing-ch₄-flux-emissions-from-fossil-fuel",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#visualizing-ch₄-flux-emissions-from-fossil-fuel",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "Visualizing CH₄ flux Emissions from Fossil Fuel",
    "text": "Visualizing CH₄ flux Emissions from Fossil Fuel\n\n# We'll import folium to map and folium.plugins to allow mapping side-by-side\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for CO₂ Layer\n# Centre of map [latitude,longitude]\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n\nmap_layer_2016 = TileLayer(\n    tiles=co2_flux_1[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.8,\n)\nmap_layer_2016.add_to(map_.m1)\n\nmap_layer_1999 = TileLayer(\n    tiles=co2_flux_2[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.8,\n)\nmap_layer_1999.add_to(map_.m2)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the fossil fuel emission time series (January 1999 -December 2016) available for the Dallas, Texas area of the U.S. We can plot the data set using the code below:\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 10))\n\n\nplt.plot(\n    df[\"datetime\"],\n    df[\"max\"],\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"CH4 emissions\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"g CH₄/m²/year\")\nplt.xticks(rotation = 90)\nplt.title(\"CH4 emission Values for Texas, Dallas (2015-2020)\")\n\nText(0.5, 1.0, 'CH4 emission Values for Texas, Dallas (2015-2020)')\n\n\n\n\n\n\n\n\n\n\nprint(items[2][\"properties\"][\"start_datetime\"])\n\n2016-10-01T00:00:00+00:00\n\n\n\nco2_flux_3 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\nco2_flux_3\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=tm54dvar-ch4flux-monthgrid-v1&item=tm54dvar-ch4flux-monthgrid-v1-201610&assets=fossil&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0.0%2C202.8189294183266'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nimport folium\n\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=6.8,\n)\n\nmap_layer = TileLayer(\n    tiles=co2_flux_3[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.7\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\naoi_map_bbox\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#summary",
    "href": "user_data_notebooks/tm54dvar-ch4flux-monthgrid-v1_User_Notebook.html#summary",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully explored, analyzed, and visualized the STAC collection for TM5-4DVar Isotopic CH₄ Inverse Fluxes dataset.",
    "crumbs": [
      "Data Usage Notebooks",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given data. The collection processed in this notebook is the Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory.\nVisualize the time series data",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#approach",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#approach",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given data. The collection processed in this notebook is the Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory.\nVisualize the time series data",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#about-the-data",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "About the Data",
    "text": "About the Data\nThe Global Greenhouse Gas Reference Network (GGGRN) for the Carbon Cycle and Greenhouse Gases (CCGG) Group is part of NOAA’S Global Monitoring Laboratory (GML) in Boulder, CO. The Reference Network measures the atmospheric distribution and trends of the three main long-term drivers of climate change, carbon dioxide (CO₂), methane (CH₄), and nitrous oxide (N2O), as well as carbon monoxide (CO) and many other trace gases which help interpretation of the main GHGs. The Reference Network measurement program includes continuous in-situ measurements at 4 baseline observatories (global background sites) and 8 tall towers, as well as flask-air samples collected by volunteers at over 50 additional regional background sites and from small aircraft conducting regular vertical profiles. The air samples are returned to GML for analysis where measurements of about 55 trace gases are done. NOAA’s GGGRN maintains the World Meteorological Organization international calibration scales for CO₂, CH₄, CO, N2O, and SF6 in air. The measurements from the GGGRN serve as a comparison with measurements made by many other international laboratories, and with regional studies. They are widely used in modeling studies that infer space-time patterns of emissions and removals of greenhouse gases that are optimally consistent with the atmospheric observations, given wind patterns. These data serve as an early warning for climate “surprises”. The measurements are also helpful for the ongoing evaluation of remote sensing technologies.",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#installing-the-required-libraries",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#installing-the-required-libraries",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "Installing the required libraries",
    "text": "Installing the required libraries\nPlease run the cell below to install the libraries required to run this notebook.\n\n%pip install matplotlib\n%pip install pandas\n%pip install requests\n\nRequirement already satisfied: matplotlib in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (3.7.1)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (5.12.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (1.0.5)\nRequirement already satisfied: numpy&gt;=1.20 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (1.24.3)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (4.25.0)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: pillow&gt;=6.2.0 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (9.5.0)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (23.1)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: zipp&gt;=3.1.0 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib) (3.15.0)\nRequirement already satisfied: six&gt;=1.5 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\nRequirement already satisfied: pandas in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (2.0.3)\nRequirement already satisfied: numpy&gt;=1.20.3 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from pandas) (1.24.3)\nRequirement already satisfied: tzdata&gt;=2022.1 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from pandas) (2023.3)\nRequirement already satisfied: pytz&gt;=2020.1 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from pandas) (2023.3)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: six&gt;=1.5 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\nRequirement already satisfied: requests in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (2.31.0)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from requests) (1.26.16)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from requests) (3.4)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from requests) (2023.7.22)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Users/vgaur/miniconda3/envs/cmip6/lib/python3.9/site-packages (from requests) (3.1.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\nImporting required libraries\n\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nimport requests",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#reading-the-noaa-data-from-github-repo",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#reading-the-noaa-data-from-github-repo",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "Reading the NOAA data from GitHub repo",
    "text": "Reading the NOAA data from GitHub repo\n\ngithub_repo_owner = \"NASA-IMPACT\"\ngithub_repo_name = \"noaa-viz\"\nfolder_path_ch4, folder_path_co2 = \"flask/ch4\", \"flask/c02\"\ncombined_df_co2, combined_df_ch4 = pd.DataFrame(), pd.DataFrame()\n\n\n# Function to fetch and append a file from GitHub\ndef append_github_file(file_url):\n    response = requests.get(file_url)\n    response.raise_for_status()\n    return response.text\n\n# Get the list of CH4 files in the specified directory using GitHub API\ngithub_api_url = f\"https://api.github.com/repos/{github_repo_owner}/{github_repo_name}/contents/{folder_path_ch4}\"\nresponse = requests.get(github_api_url)\nresponse.raise_for_status()\nfile_list_ch4 = response.json()\n\n# Get the list of CO2 files in the specified directory using GitHub API\ngithub_api_url = f\"https://api.github.com/repos/{github_repo_owner}/{github_repo_name}/contents/{folder_path_ch4}\"\nresponse = requests.get(github_api_url)\nresponse.raise_for_status()\nfile_list_co2 = response.json()",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#concatenating-the-ch4-data-into-a-single-dataframe",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#concatenating-the-ch4-data-into-a-single-dataframe",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "Concatenating the CH4 data into a single DataFrame",
    "text": "Concatenating the CH4 data into a single DataFrame\n\nfor file_info in file_list_ch4:\n    if file_info[\"name\"].endswith(\"txt\"):\n        file_content = append_github_file(file_info[\"download_url\"])\n        Lines = file_content.splitlines()\n        index = Lines.index(\"# VARIABLE ORDER\")+2\n        df = pd.read_csv(StringIO(\"\\n\".join(Lines[index:])), delim_whitespace=True)\n        combined_df_ch4 = pd.concat([combined_df_ch4, df], ignore_index=True)",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#concatenating-the-co2-data-into-a-single-dataframe",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#concatenating-the-co2-data-into-a-single-dataframe",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "Concatenating the CO2 data into a single DataFrame",
    "text": "Concatenating the CO2 data into a single DataFrame\n\nfor file_info in file_list_co2:\n    if file_info[\"name\"].endswith(\"txt\"):\n        file_content = append_github_file(file_info[\"download_url\"])\n        Lines = file_content.splitlines()\n        index = Lines.index(\"# VARIABLE ORDER\")+2\n        df = pd.read_csv(StringIO(\"\\n\".join(Lines[index:])), delim_whitespace=True)\n        combined_df_co2 = pd.concat([combined_df_co2, df], ignore_index=True)",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#visualizing-the-noaa-data-for-ch4-and-co2",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#visualizing-the-noaa-data-for-ch4-and-co2",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "Visualizing the NOAA data for CH4 and CO2",
    "text": "Visualizing the NOAA data for CH4 and CO2\n\nsite_to_filter = 'ABP'\nfiltered_df = combined_df_co2[combined_df_co2['site_code'] == site_to_filter]\n\nfiltered_df['datetime'] = pd.to_datetime(filtered_df['datetime'])\n\n# Set the \"Date\" column as the index\nfiltered_df.set_index('datetime', inplace=True)\n\n# Create a time series plot for 'Data' and 'Value'\nplt.figure(figsize=(12, 6))\nplt.plot(filtered_df.index, filtered_df['value'], label='Carbon Dioxide(CO2) Concentration (ppm)')\nplt.xlabel(\"Observed Date/Time\")\nplt.ylabel(\"Carbon Dioxide(CO2) Concentration (ppm)\")\nplt.title(f\"Observed Co2 Concentration {site_to_filter}\")\nplt.legend()\nplt.grid(True)\n# plt.show()\n\n/var/folders/7b/5rrvrjx51l54jchgs0tqps0c0000gn/T/ipykernel_70808/2606016741.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  filtered_df['datetime'] = pd.to_datetime(filtered_df['datetime'])\n\n\n\n\n\n\n\n\n\n\nsite_to_filter = 'ABP'\nfiltered_df = combined_df_ch4[combined_df_ch4['site_code'] == site_to_filter]\nfiltered_df['datetime'] = pd.to_datetime(filtered_df['datetime'])\n\n# Set the \"Date\" column as the index\nfiltered_df.set_index('datetime', inplace=True)\n\n# Create a time series plot for 'Data' and 'Value'\nplt.figure(figsize=(12, 6))\nplt.plot(filtered_df.index, filtered_df['value'], label='Methane Ch4 Concentration (ppb)')\nplt.xlabel(\"Observation Date/Time\")\nplt.ylabel(\"Methane Ch4 Concentration (ppb)\")\nplt.title(f\"Observed CH4 Concentration {site_to_filter}\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n/var/folders/7b/5rrvrjx51l54jchgs0tqps0c0000gn/T/ipykernel_70808/1635934907.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  filtered_df['datetime'] = pd.to_datetime(filtered_df['datetime'])",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/noaa-insitu_User_Notebook.html#summary",
    "href": "user_data_notebooks/noaa-insitu_User_Notebook.html#summary",
    "title": "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully visualized the data for Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory.",
    "crumbs": [
      "Data Usage Notebooks",
      "Atmospheric Carbon Dioxide Concentrations from NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html",
    "href": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the gridded methane emissions data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#approach",
    "href": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#approach",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the gridded methane emissions data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#about-the-data",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "About the Data",
    "text": "About the Data\nThe NASA Carbon Monitoring System Flux (CMS-Flux) team analyzed remote sensing observations from Japan’s Greenhouse gases Observing SATellite (GOSAT) to produce the global Committee on Earth Observation Satellites (CEOS) CH₄ Emissions data product. They used an analytic Bayesian inversion approach and the GEOS-Chem global chemistry transport model to quantify annual methane (CH₄) emissions and their uncertainties at a spatial resolution of 1° by 1° and then projected these to each country for 2019.",
    "crumbs": [
      "Data Usage Notebooks",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#querying-the-stac-api",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# Please use the collection name similar to the one used in STAC collection.\n\n# Name of the collection for gosat budget methane. \ncollection_name = \"gosat-based-ch4budget-yeargrid-v1\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'gosat-based-ch4budget-yeargrid-v1',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/gosat-based-ch4budget-yeargrid-v1/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/gosat-based-ch4budget-yeargrid-v1'}],\n 'title': 'GOSAT-based Top-down Methane Budgets.',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-180.5, -90.5, 179.5, 89.5]]},\n  'temporal': {'interval': [['2019-01-01T00:00:00+00:00',\n     '2019-12-31T00:00:00+00:00']]}},\n 'license': 'CC-BY-4.0',\n 'keywords': None,\n 'providers': None,\n 'summaries': {'datetime': ['2019-01-01T00:00:00Z']},\n 'description': 'Annual methane emissions gridded globally at 1° resolution for 2019, version.',\n 'item_assets': {'post-gas': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-geo': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-oil': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-coal': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-fire': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-rice': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-gas': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-geo': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-oil': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-total': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-waste': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-coal': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-fire': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-rice': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-total': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-waste': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-wetland': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-wetland': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-livestock': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-livestock': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-gas-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-geo-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-oil-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-coal-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-fire-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-rice-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-gas-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-geo-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-oil-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-waste-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-coal-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-rice-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-waste-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-wetland-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-wetland-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'post-livestock-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'},\n  'prior-livestock-uncertainty': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'description': 'TBD'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': False,\n 'dashboard:time_density': 'year'}\n\n\nExamining the contents of our collection under the temporal variable, we see that the data is available from January 2012 to December 2018. By looking at the dashboard:time density, we observe that the data is available for only one year, i.e. 2019.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 1 items\n\n\n\n# Examining the first item in the collection\nitems[0]\n\n{'id': 'gosat-based-ch4budget-yeargrid-v1-2019',\n 'bbox': [-180.5, -90.5, 179.5, 89.5],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/gosat-based-ch4budget-yeargrid-v1'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/gosat-based-ch4budget-yeargrid-v1'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/gosat-based-ch4budget-yeargrid-v1/items/gosat-based-ch4budget-yeargrid-v1-2019'}],\n 'assets': {'post-gas': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_gas_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.6140491962432861,\n      'min': -0.4103066623210907,\n      'count': 11.0,\n      'buckets': [1.0, 0.0, 2.0, 23.0, 64734.0, 30.0, 7.0, 2.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.00043242290848866105,\n      'stddev': 0.006180576980113983,\n      'maximum': 0.6140491962432861,\n      'minimum': -0.4103066623210907,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-geo': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_geo_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.0034276247024536,\n      'min': -1.0016025304794312,\n      'count': 11.0,\n      'buckets': [1.0, 0.0, 1.0, 5.0, 63425.0, 1354.0, 10.0, 2.0, 1.0, 1.0]},\n     'statistics': {'mean': 0.0003479516308289021,\n      'stddev': 0.0093332938849926,\n      'maximum': 1.0034276247024536,\n      'minimum': -1.0016025304794312,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-oil': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_oil_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 3.457329273223877,\n      'min': -0.7987076640129089,\n      'count': 11.0,\n      'buckets': [2.0, 64681.0, 108.0, 4.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.0004447368555702269,\n      'stddev': 0.01879083551466465,\n      'maximum': 3.457329273223877,\n      'minimum': -0.7987076640129089,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-coal': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_coal_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.1035711765289307,\n      'min': -0.9143016934394836,\n      'count': 11.0,\n      'buckets': [1.0, 1.0, 1.0, 1.0, 64710.0, 62.0, 19.0, 3.0, 1.0, 1.0]},\n     'statistics': {'mean': 0.0003904950572177768,\n      'stddev': 0.01172551792114973,\n      'maximum': 1.1035711765289307,\n      'minimum': -0.9143016934394836,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-fire': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_fire_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.7065173387527466,\n      'min': -0.08211488276720047,\n      'count': 11.0,\n      'buckets': [103.0, 64685.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.00020585705351550132,\n      'stddev': 0.00356540665961802,\n      'maximum': 0.7065173387527466,\n      'minimum': -0.08211488276720047,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-rice': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_rice_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.3836066722869873,\n      'min': -1.1384793519973755,\n      'count': 11.0,\n      'buckets': [1.0, 4.0, 12.0, 20.0, 64581.0, 132.0, 30.0, 11.0, 4.0, 5.0]},\n     'statistics': {'mean': 0.0010437712771818042,\n      'stddev': 0.024994080886244774,\n      'maximum': 1.3836066722869873,\n      'minimum': -1.1384793519973755,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-gas': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_gas_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.2977725863456726,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64659.0, 93.0, 27.0, 8.0, 2.0, 4.0, 2.0, 2.0, 2.0, 1.0]},\n     'statistics': {'mean': 0.00037746498128399253,\n      'stddev': 0.00403926195576787,\n      'maximum': 0.2977725863456726,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-geo': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_geo_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.8356599807739258,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64780.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.0004932624287903309,\n      'stddev': 0.009640775620937347,\n      'maximum': 1.8356599807739258,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-oil': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_oil_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.287477731704712,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64734.0, 40.0, 15.0, 3.0, 1.0, 4.0, 0.0, 1.0, 1.0, 1.0]},\n     'statistics': {'mean': 0.0006414719391614199,\n      'stddev': 0.01284099742770195,\n      'maximum': 1.287477731704712,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-total': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_total_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 3.621621608734131,\n      'min': -1.157373309135437,\n      'count': 11.0,\n      'buckets': [8.0, 69.0, 64300.0, 366.0, 41.0, 13.0, 2.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.008661163039505482,\n      'stddev': 0.057076238095760345,\n      'maximum': 3.621621608734131,\n      'minimum': -1.157373309135437,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-waste': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_waste_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.2296125888824463,\n      'min': -0.5908117294311523,\n      'count': 11.0,\n      'buckets': [1.0, 2.0, 10.0, 64753.0, 26.0, 5.0, 1.0, 1.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.0007660945411771536,\n      'stddev': 0.010033484548330307,\n      'maximum': 1.2296125888824463,\n      'minimum': -0.5908117294311523,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-coal': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_coal_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.3838224411010742,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64746.0, 29.0, 11.0, 2.0, 5.0, 2.0, 2.0, 2.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.0004846722586080432,\n      'stddev': 0.01380141545087099,\n      'maximum': 1.3838224411010742,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-fire': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_fire_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.498909056186676,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64786.0, 7.0, 1.0, 3.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.0002329142007511109,\n      'stddev': 0.0032598471734672785,\n      'maximum': 0.498909056186676,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-rice': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_rice_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.5223113298416138,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64539.0, 154.0, 55.0, 25.0, 16.0, 8.0, 2.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.000768911384511739,\n      'stddev': 0.008794998750090599,\n      'maximum': 0.5223113298416138,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-total': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_total_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 2.121816635131836,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64390.0, 297.0, 63.0, 26.0, 13.0, 7.0, 3.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.008324408903717995,\n      'stddev': 0.04165573790669441,\n      'maximum': 2.121816635131836,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-waste': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_waste_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.4146164655685425,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64750.0, 36.0, 6.0, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0]},\n     'statistics': {'mean': 0.0008899783715605736,\n      'stddev': 0.011600765399634838,\n      'maximum': 1.4146164655685425,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-wetland': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_wetland_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 2.0359816551208496,\n      'min': -0.8375182747840881,\n      'count': 11.0,\n      'buckets': [5.0, 15.0, 63361.0, 1288.0, 94.0, 24.0, 7.0, 2.0, 2.0, 2.0]},\n     'statistics': {'mean': 0.0027753026224672794,\n      'stddev': 0.033493757247924805,\n      'maximum': 2.0359816551208496,\n      'minimum': -0.8375182747840881,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-wetland': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_wetland_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.2217899560928345,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64489.0, 188.0, 52.0, 29.0, 17.0, 11.0, 3.0, 4.0, 3.0, 4.0]},\n     'statistics': {'mean': 0.0030836397781968117,\n      'stddev': 0.026006272062659264,\n      'maximum': 1.2217899560928345,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-livestock': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_livestock_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.4482361972332001,\n      'min': -0.2484263777732849,\n      'count': 11.0,\n      'buckets': [2.0,\n       10.0,\n       56.0,\n       63290.0,\n       1110.0,\n       239.0,\n       61.0,\n       14.0,\n       13.0,\n       5.0]},\n     'statistics': {'mean': 0.0022545307874679565,\n      'stddev': 0.014899863861501217,\n      'maximum': 0.4482361972332001,\n      'minimum': -0.2484263777732849,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-livestock': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_livestock_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.1304568201303482,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [62701.0,\n       1246.0,\n       462.0,\n       214.0,\n       61.0,\n       40.0,\n       41.0,\n       21.0,\n       11.0,\n       3.0]},\n     'statistics': {'mean': 0.0013520935317501426,\n      'stddev': 0.006176645867526531,\n      'maximum': 0.1304568201303482,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-gas-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_gas_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.026829414069652557,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64766.0, 20.0, 4.0, 6.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]},\n     'statistics': {'mean': 8.39770473248791e-06,\n      'stddev': 0.00022043172793928534,\n      'maximum': 0.026829414069652557,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-geo-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_geo_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.25446972250938416,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64793.0, 5.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 1.9521785361575894e-05,\n      'stddev': 0.0011142849689349532,\n      'maximum': 0.25446972250938416,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-oil-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_oil_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.20816677808761597,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64775.0, 15.0, 2.0, 5.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0]},\n     'statistics': {'mean': 3.7560705095529556e-05,\n      'stddev': 0.0014476124197244644,\n      'maximum': 0.20816677808761597,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-coal-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_coal_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.28081363439559937,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64778.0, 7.0, 5.0, 1.0, 3.0, 3.0, 2.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 4.5709952246397734e-05,\n      'stddev': 0.0022045010700821877,\n      'maximum': 0.28081363439559937,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-fire-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_fire_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.04287702962756157,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64794.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 3.030148036486935e-06,\n      'stddev': 0.00021067954367026687,\n      'maximum': 0.04287702962756157,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-rice-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_rice_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.085321806371212,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64609.0, 88.0, 42.0, 26.0, 15.0, 9.0, 2.0, 4.0, 3.0, 2.0]},\n     'statistics': {'mean': 8.745533705223352e-05,\n      'stddev': 0.0015292511088773608,\n      'maximum': 0.085321806371212,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-gas-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_gas_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.035356033593416214,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64766.0, 17.0, 5.0, 3.0, 3.0, 0.0, 1.0, 1.0, 0.0, 4.0]},\n     'statistics': {'mean': 1.1367864317435306e-05,\n      'stddev': 0.0003570150875020772,\n      'maximum': 0.035356033593416214,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-geo-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_geo_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.6511273384094238,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64799.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 4.881064160144888e-05,\n      'stddev': 0.006545887794345617,\n      'maximum': 1.6511273384094238,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-oil-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_oil_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.8458506464958191,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64787.0, 5.0, 5.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0]},\n     'statistics': {'mean': 9.116153523791581e-05,\n      'stddev': 0.00547912297770381,\n      'maximum': 0.8458506464958191,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-waste-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_waste_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.10136520117521286,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64759.0, 19.0, 6.0, 8.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0]},\n     'statistics': {'mean': 3.903839024133049e-05,\n      'stddev': 0.0009961748728528619,\n      'maximum': 0.10136520117521286,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-coal-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_coal_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.9433419704437256,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64785.0, 5.0, 4.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 9.546576620778069e-05,\n      'stddev': 0.00589930871501565,\n      'maximum': 0.9433419704437256,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-rice-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_rice_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.2505281865596771,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64710.0, 52.0, 26.0, 5.0, 3.0, 3.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.00012143573985667899,\n      'stddev': 0.002463066717609763,\n      'maximum': 0.2505281865596771,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-waste-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_waste_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.3018296957015991,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64793.0, 4.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.0001001738928607665,\n      'stddev': 0.006979630794376135,\n      'maximum': 1.3018296957015991,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-wetland-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_wetland_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.36633968353271484,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64677.0, 68.0, 19.0, 14.0, 5.0, 8.0, 3.0, 4.0, 0.0, 2.0]},\n     'statistics': {'mean': 0.00034577888436615467,\n      'stddev': 0.005308355204761028,\n      'maximum': 0.36633968353271484,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-wetland-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_wetland_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 1.5251290798187256,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64704.0, 49.0, 21.0, 11.0, 2.0, 3.0, 3.0, 3.0, 1.0, 3.0]},\n     'statistics': {'mean': 0.0009943766053766012,\n      'stddev': 0.020392030477523804,\n      'maximum': 1.5251290798187256,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'post-livestock-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_post_unc_livestock_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.016047537326812744,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64206.0,\n       360.0,\n       119.0,\n       35.0,\n       30.0,\n       20.0,\n       14.0,\n       9.0,\n       6.0,\n       1.0]},\n     'statistics': {'mean': 5.696367225027643e-05,\n      'stddev': 0.00044628031901083887,\n      'maximum': 0.016047537326812744,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]},\n  'prior-livestock-uncertainty': {'href': 's3://ghgc-data-store/gosat-based-ch4budget-yeargrid-v1/TopDownEmissions_GOSAT_prior_unc_livestock_GEOS_CHEM_2019.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'TBD',\n   'proj:bbox': [-180.5, -90.5, 179.5, 89.5],\n   'proj:epsg': 4326.0,\n   'proj:shape': [180.0, 360.0],\n   'description': 'TBD',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.021834801882505417,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [64219.0,\n       326.0,\n       127.0,\n       34.0,\n       19.0,\n       25.0,\n       25.0,\n       17.0,\n       5.0,\n       3.0]},\n     'statistics': {'mean': 7.657577225472778e-05,\n      'stddev': 0.0006582040223293006,\n      'maximum': 0.021834801882505417,\n      'minimum': 0.0,\n      'valid_percent': 0.00154320987654321}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.5, -90.5],\n      [179.5, -90.5],\n      [179.5, 89.5],\n      [-180.5, 89.5],\n      [-180.5, -90.5]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [1.0, 0.0, -180.5, 0.0, -1.0, 89.5, 0.0, 0.0, 1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180.5, -90.5],\n    [179.5, -90.5],\n    [179.5, 89.5],\n    [-180.5, 89.5],\n    [-180.5, -90.5]]]},\n 'collection': 'gosat-based-ch4budget-yeargrid-v1',\n 'properties': {'end_datetime': '2019-12-31T00:00:00+00:00',\n  'start_datetime': '2019-01-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\nBelow, we enter minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#exploring-changes-in-gosat-methane-budgets-ch4-levels-using-the-raster-api",
    "href": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#exploring-changes-in-gosat-methane-budgets-ch4-levels-using-the-raster-api",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "Exploring Changes in GOSAT Methane budgets (CH4) Levels Using the Raster API",
    "text": "Exploring Changes in GOSAT Methane budgets (CH4) Levels Using the Raster API\nIn this notebook, we will explore the impacts of methane emissions and by examining changes over time in urban regions. We will visualize the outputs on a map using folium.\n\n# To access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"start_datetime\"][:10]: item for item in items} \nasset_name = \"prior-total\"\n\n\n# Fetching the min and max values for a specific item\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\n\nitems.keys()\n\ndict_keys(['2019-01-01'])\n\n\nNow, we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this for first January 2019.\n\ncolor_map = \"rainbow\" # please select the color ramp from matplotlib library.\njanuary_2019_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2019-01-01']['collection']}&item={items['2019-01-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\njanuary_2019_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=gosat-based-ch4budget-yeargrid-v1&item=gosat-based-ch4budget-yeargrid-v1-2019&assets=prior-total&color_formula=gamma+r+1.05&colormap_name=rainbow&rescale=0.0%2C2.121816635131836'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.5, -90.5, 179.5, 89.5],\n 'center': [-0.5, -0.5, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#visualizing-ch₄-emissions",
    "href": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#visualizing-ch₄-emissions",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "Visualizing CH₄ Emissions",
    "text": "Visualizing CH₄ Emissions\n\n# We will import folium to map and folium.plugins to allow side-by-side mapping\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for CH₄ Layer\n# Centre of map [latitude,longitude]\nmap_ = folium.Map(location=(34, -118), zoom_start=6)\n\n# January 2019\nmap_layer_2019 = TileLayer(\n    tiles=january_2019_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.7,\n)\nmap_layer_2019.add_to(map_)\n\n# # January 2012\n# map_layer_2012 = TileLayer(\n#     tiles=january_2012_tile[\"tiles\"][0],\n#     attr=\"GHG\",\n#     opacity=0.7,\n# )\n# map_layer_2012.add_to(map_.m2)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#summary",
    "href": "user_data_notebooks/gosat-based-ch4budget-yeargrid-v1_User_Notebook.html#summary",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully explored, analyzed, and visualized the STAC collection for GOSAT-based Top-down Total and Natural Methane Emissions.",
    "crumbs": [
      "Data Usage Notebooks",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html",
    "title": "SEDAC Gridded World Population Density",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. Collection processed in this notebook is SEDAC gridded population density.\nPass the STAC item into raster API /stac/tilejson.json endpoint\nWe’ll visualize two tiles (side-by-side) allowing for comparison of each of the time points using folium.plugins.DualMap\nAfter the visualization, we’ll perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#approach",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#approach",
    "title": "SEDAC Gridded World Population Density",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. Collection processed in this notebook is SEDAC gridded population density.\nPass the STAC item into raster API /stac/tilejson.json endpoint\nWe’ll visualize two tiles (side-by-side) allowing for comparison of each of the time points using folium.plugins.DualMap\nAfter the visualization, we’ll perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#about-the-data",
    "title": "SEDAC Gridded World Population Density",
    "section": "About the Data",
    "text": "About the Data\nThe SEDAC Gridded Population of the World: Population Density, v4.11 dataset provides annual estimates of population density for the years 2000, 2005, 2010, 2015, and 2020 on a 30 arc-second (~1 km) grid. These data can be used for assessing disaster impacts, risk mapping, and any other applications that include a human dimension. This population density dataset is provided by NASA’s Socioeconomic Data and Applications Center (SEDAC) hosted by the Center for International Earth Science Information Network (CIESIN) at Columbia University. The population estimates are provided as a continuous raster for the entire globe.",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#querying-the-stac-api",
    "title": "SEDAC Gridded World Population Density",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n#Please use the collection name similar to the one used in STAC collection.\n# Name of the collection for SEDAC population density dataset. \ncollection_name = \"sedac-popdensity-yeargrid5yr-v4.11\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'sedac-popdensity-yeargrid5yr-v4.11',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11'}],\n 'title': 'SEDAC Gridded World Population Data',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'temporal': {'interval': [['2000-01-01T00:00:00+00:00',\n     '2020-12-31T00:00:00+00:00']]}},\n 'license': 'CC-BY-4.0',\n 'keywords': None,\n 'providers': None,\n 'summaries': {'datetime': ['2000-01-01T00:00:00Z',\n   '2005-01-01T00:00:00Z',\n   '2010-01-01T00:00:00Z',\n   '2015-01-01T00:00:00Z',\n   '2020-01-01T00:00:00Z']},\n 'description': 'The Gridded Population of the World, Version 4 (GPWv4): Population Density, Revision 11 consists of estimates of human population density (number of persons per square kilometer) based on counts consistent with national censuses and population registers, for the years 2000, 2005, 2010, 2015, and 2020. ',\n 'item_assets': {'population-density': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Population density',\n   'description': 'Provides estimates of population density based on counts consistent with national censuses and population registers'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': False,\n 'dashboard:time_density': 'year'}\n\n\nExamining the contents of our collection under summaries we see that the data is available from January 2000 to December 2020. By looking at the dashboard:time density we observe that the data is available for the years 2000, 2005, 2010, 2015, 2020.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 5 items\n\n\n\nitems[0]\n\n{'id': 'sedac-popdensity-yeargrid5yr-v4.11-2020',\n 'bbox': [-180.0, -90.0, 179.99999999999983, 89.99999999999991],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11/items/sedac-popdensity-yeargrid5yr-v4.11-2020'}],\n 'assets': {'population-density': {'href': 's3://ghgc-data-store/sedac-popdensity-yeargrid5yr-v4.11/gpw_v4_population_density_rev11_2020_30_sec_2020.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Population density',\n   'proj:bbox': [-180.0, -90.0, 179.99999999999983, 89.99999999999991],\n   'proj:epsg': 4326.0,\n   'proj:shape': [21600.0, 43200.0],\n   'description': 'Provides estimates of population density based on counts consistent with national censuses and population registers',\n   'raster:bands': [{'scale': 1.0,\n     'nodata': -3.4028230607370965e+38,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 30795.859375,\n      'min': -1505.7174072265625,\n      'count': 11.0,\n      'buckets': [129008.0, 362.0, 52.0, 22.0, 7.0, 2.0, 2.0, 0.0, 1.0, 1.0]},\n     'statistics': {'mean': 55.30964721876762,\n      'stddev': 319.5376065398882,\n      'maximum': 30795.859375,\n      'minimum': -1505.7174072265625,\n      'valid_percent': 24.69196319580078}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [179.99999999999983, -90.0],\n      [179.99999999999983, 89.99999999999991],\n      [-180.0, 89.99999999999991],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.00833333333333333,\n    0.0,\n    -180.0,\n    0.0,\n    -0.00833333333333333,\n    89.99999999999991,\n    0.0,\n    0.0,\n    1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [179.99999999999983, -90],\n    [179.99999999999983, 89.99999999999991],\n    [-180, 89.99999999999991],\n    [-180, -90]]]},\n 'collection': 'sedac-popdensity-yeargrid5yr-v4.11',\n 'properties': {'end_datetime': '2020-12-31T00:00:00+00:00',\n  'start_datetime': '2020-01-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\nBelow, we are entering the minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#exploring-changes-in-the-world-population-density-using-the-raster-api",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#exploring-changes-in-the-world-population-density-using-the-raster-api",
    "title": "SEDAC Gridded World Population Density",
    "section": "Exploring Changes in the World Population Density using the Raster API",
    "text": "Exploring Changes in the World Population Density using the Raster API\nWe will explore changes in population density in urban regions. In this notebook, we’ll explore the changes in population density over time. We’ll then visualize the outputs on a map using folium.\n\n# to access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"start_datetime\"][:7]: item for item in items} \nasset_name = \"population-density\"\n\n\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\nNow we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for January 2000 and again for January 2020, so that we can visualize each event independently.\n\ncolor_map = \"rainbow\" # please select the color ramp from matplotlib library.\njanuary_2020_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2020-01']['collection']}&item={items['2020-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\njanuary_2020_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=sedac-popdensity-yeargrid5yr-v4.11&item=sedac-popdensity-yeargrid5yr-v4.11-2020&assets=population-density&color_formula=gamma+r+1.05&colormap_name=rainbow&rescale=-1505.7174072265625%2C30795.859375'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 179.99999999999983, 89.99999999999991],\n 'center': [-8.526512829121202e-14, -4.263256414560601e-14, 0]}\n\n\n\njanuary_2000_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2000-01']['collection']}&item={items['2000-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\njanuary_2000_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=sedac-popdensity-yeargrid5yr-v4.11&item=sedac-popdensity-yeargrid5yr-v4.11-2000&assets=population-density&color_formula=gamma+r+1.05&colormap_name=rainbow&rescale=-1505.7174072265625%2C30795.859375'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 179.99999999999983, 89.99999999999991],\n 'center': [-8.526512829121202e-14, -4.263256414560601e-14, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#visualizing-population-density.",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#visualizing-population-density.",
    "title": "SEDAC Gridded World Population Density",
    "section": "Visualizing Population Density.",
    "text": "Visualizing Population Density.\n\n# We'll import folium to map and folium.plugins to allow mapping side-by-side\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for population density Layer\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n# January 2020\nmap_layer_2020 = TileLayer(\n    tiles=january_2020_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=1,\n)\nmap_layer_2020.add_to(map_.m1)\n\n# January 2000\nmap_layer_2000 = TileLayer(\n    tiles=january_2000_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=1,\n)\nmap_layer_2000.add_to(map_.m2)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#section",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#section",
    "title": "SEDAC Gridded World Population Density",
    "section": "",
    "text": "# Texas, USA\ntexas_aoi = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n        \"coordinates\": [\n            [\n                # [13.686159004559698, -21.700046934333145],\n                # [13.686159004559698, -23.241974326585833],\n                # [14.753560168039911, -23.241974326585833],\n                # [14.753560168039911, -21.700046934333145],\n                # [13.686159004559698, -21.700046934333145],\n                [-95, 29],\n                [-95, 33],\n                [-104, 33],\n                [-104,29],\n                [-95, 29]\n            ]\n        ],\n        \"type\": \"Polygon\",\n    },\n}\n\n\n# We'll plug in the coordinates for a location\n# central to the study area and a reasonable zoom level\n\nimport folium\n\naoi_map = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=6,\n)\n\nfolium.GeoJson(texas_aoi, name=\"Texas, USA\").add_to(aoi_map)\naoi_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Check total number of items available\nitems = requests.get(\n    f\"{STAC_API_URL}/collections/{collection_name}/items?limit=300\"\n).json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 5 items\n\n\n\n# Explore one item to see what it contains\nitems[0]\n\n{'id': 'sedac-popdensity-yeargrid5yr-v4.11-2020',\n 'bbox': [-180.0, -90.0, 179.99999999999983, 89.99999999999991],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/sedac-popdensity-yeargrid5yr-v4.11/items/sedac-popdensity-yeargrid5yr-v4.11-2020'}],\n 'assets': {'population-density': {'href': 's3://ghgc-data-store/sedac-popdensity-yeargrid5yr-v4.11/gpw_v4_population_density_rev11_2020_30_sec_2020.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Population density',\n   'proj:bbox': [-180.0, -90.0, 179.99999999999983, 89.99999999999991],\n   'proj:epsg': 4326.0,\n   'proj:shape': [21600.0, 43200.0],\n   'description': 'Provides estimates of population density based on counts consistent with national censuses and population registers',\n   'raster:bands': [{'scale': 1.0,\n     'nodata': -3.4028230607370965e+38,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 30795.859375,\n      'min': -1505.7174072265625,\n      'count': 11.0,\n      'buckets': [129008.0, 362.0, 52.0, 22.0, 7.0, 2.0, 2.0, 0.0, 1.0, 1.0]},\n     'statistics': {'mean': 55.30964721876762,\n      'stddev': 319.5376065398882,\n      'maximum': 30795.859375,\n      'minimum': -1505.7174072265625,\n      'valid_percent': 24.69196319580078}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [179.99999999999983, -90.0],\n      [179.99999999999983, 89.99999999999991],\n      [-180.0, 89.99999999999991],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.00833333333333333,\n    0.0,\n    -180.0,\n    0.0,\n    -0.00833333333333333,\n    89.99999999999991,\n    0.0,\n    0.0,\n    1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [179.99999999999983, -90],\n    [179.99999999999983, 89.99999999999991],\n    [-180, 89.99999999999991],\n    [-180, -90]]]},\n 'collection': 'sedac-popdensity-yeargrid5yr-v4.11',\n 'properties': {'end_datetime': '2020-12-31T00:00:00+00:00',\n  'start_datetime': '2020-01-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\n\n# the bounding box should be passed to the geojson param as a geojson Feature or FeatureCollection\ndef generate_stats(item, geojson):\n    result = requests.post(\n        f\"{RASTER_API_URL}/cog/statistics\",\n        params={\"url\": item[\"assets\"][asset_name][\"href\"]},\n        json=geojson,\n    ).json()\n    return {\n        **result[\"properties\"],\n        \"start_datetime\": item[\"properties\"][\"start_datetime\"],\n    }\n\nWith the function above we can generate the statistics for the AOI.\n\n%%time\nstats = [generate_stats(item, texas_aoi) for item in items]\n\nCPU times: user 84.8 ms, sys: 10.4 ms, total: 95.1 ms\nWall time: 6.83 s\n\n\n\nstats[0]\n\n{'statistics': {'b1': {'min': 0.0,\n   'max': 18419.53125,\n   'mean': 58.53235268568119,\n   'count': 518400.0,\n   'sum': 30321222.0,\n   'std': 335.6929520668643,\n   'median': 0.4415185749530792,\n   'majority': 0.0,\n   'minority': 1.0156783218917553e-06,\n   'unique': 304154.0,\n   'histogram': [[512941.0,\n     4330.0,\n     627.0,\n     91.0,\n     22.0,\n     7.0,\n     1.0,\n     4.0,\n     0.0,\n     2.0],\n    [0.0,\n     1841.953125,\n     3683.90625,\n     5525.859375,\n     7367.8125,\n     9209.765625,\n     11051.71875,\n     12893.671875,\n     14735.625,\n     16577.578125,\n     18419.53125]],\n   'valid_percent': 99.93,\n   'masked_pixels': 375.0,\n   'valid_pixels': 518025.0,\n   'percentile_2': 0.0,\n   'percentile_98': 898.1920996093824}},\n 'start_datetime': '2020-01-01T00:00:00+00:00'}\n\n\n\nimport pandas as pd\n\n\ndef clean_stats(stats_json) -&gt; pd.DataFrame:\n    df = pd.json_normalize(stats_json)\n    df.columns = [col.replace(\"statistics.b1.\", \"\") for col in df.columns]\n    df[\"date\"] = pd.to_datetime(df[\"start_datetime\"])\n    return df\n\n\ndf = clean_stats(stats)\ndf.head(5)\n\n\n\n\n\n\n\n\n\nstart_datetime\nmin\nmax\nmean\ncount\nsum\nstd\nmedian\nmajority\nminority\nunique\nhistogram\nvalid_percent\nmasked_pixels\nvalid_pixels\npercentile_2\npercentile_98\ndate\n\n\n\n\n0\n2020-01-01T00:00:00+00:00\n0.0\n18419.531250\n58.532353\n518400.0\n30321222.0\n335.692952\n0.441519\n0.0\n0.000001\n304154.0\n[[512941.0, 4330.0, 627.0, 91.0, 22.0, 7.0, 1....\n99.93\n375.0\n518025.0\n0.0\n898.192100\n2020-01-01 00:00:00+00:00\n\n\n1\n2015-01-01T00:00:00+00:00\n0.0\n16791.851562\n52.619171\n518400.0\n27258046.0\n302.069689\n0.432173\n0.0\n0.000001\n304042.0\n[[513082.0, 4248.0, 572.0, 87.0, 20.0, 9.0, 1....\n99.93\n375.0\n518025.0\n0.0\n802.884363\n2015-01-01 00:00:00+00:00\n\n\n2\n2010-01-01T00:00:00+00:00\n0.0\n15308.004883\n47.493947\n518400.0\n24603052.0\n273.645484\n0.426434\n0.0\n0.000001\n304161.0\n[[513182.0, 4159.0, 560.0, 83.0, 25.0, 9.0, 1....\n99.93\n375.0\n518025.0\n0.0\n722.900876\n2010-01-01 00:00:00+00:00\n\n\n3\n2005-01-01T00:00:00+00:00\n0.0\n13955.282227\n43.030074\n518400.0\n22290654.0\n249.332851\n0.417514\n0.0\n0.000001\n304215.0\n[[513253.0, 4076.0, 561.0, 91.0, 27.0, 10.0, 1...\n99.93\n375.0\n518025.0\n0.0\n648.693762\n2005-01-01 00:00:00+00:00\n\n\n4\n2000-01-01T00:00:00+00:00\n0.0\n12722.096680\n39.124289\n518400.0\n20267360.0\n228.324844\n0.405285\n0.0\n0.000001\n304130.0\n[[513329.0, 3965.0, 580.0, 104.0, 29.0, 8.0, 4...\n99.93\n375.0\n518025.0\n0.0\n582.569736\n2000-01-01 00:00:00+00:00",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "SEDAC Gridded World Population Density",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the SEDAC population density dataset time series available for the Texas, Dallas area of USA. We can plot the dataset using the code below:\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 10))\n\n\nplt.plot(\n    df[\"date\"],\n    df[\"max\"],\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"Population density over the years\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"Population density\")\nplt.title(\"Population density over Texas, Dallas (2000-2020)\")\n\nText(0.5, 1.0, 'Population density over Texas, Dallas (2000-2020)')\n\n\n\n\n\n\n\n\n\n\nprint(items[2][\"properties\"][\"start_datetime\"])\n\n2010-01-01T00:00:00+00:00\n\n\n\noctober_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\noctober_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=sedac-popdensity-yeargrid5yr-v4.11&item=sedac-popdensity-yeargrid5yr-v4.11-2010&assets=population-density&color_formula=gamma+r+1.05&colormap_name=rainbow&rescale=-1505.7174072265625%2C30795.859375'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 179.99999999999983, 89.99999999999991],\n 'center': [-8.526512829121202e-14, -4.263256414560601e-14, 0]}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nimport folium\n\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=8,\n)\n\nmap_layer = TileLayer(\n    tiles=october_tile[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.5\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\naoi_map_bbox\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#summary",
    "href": "user_data_notebooks/sedac-popdensity-yeargrid5yr-v4.11_User_Notebook.html#summary",
    "title": "SEDAC Gridded World Population Density",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully explored, analyzed and visualized the STAC collection for the SEDAC Gridded World Population Density dataset.",
    "crumbs": [
      "Data Usage Notebooks",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html",
    "href": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Earth Surface Mineral Dust Source Investigation (EMIT) methane emission plumes data product.\nPass the STAC item into the raster API /stac/tilejson.json endpoint.\nUsing folium.Map, visualize the plumes.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#approach",
    "href": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#approach",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Earth Surface Mineral Dust Source Investigation (EMIT) methane emission plumes data product.\nPass the STAC item into the raster API /stac/tilejson.json endpoint.\nUsing folium.Map, visualize the plumes.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#about-the-data",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "About the Data",
    "text": "About the Data\nThe EMIT instrument builds upon NASA’s long history of developing advanced imaging spectrometers for new science and applications. EMIT launched to the International Space Station (ISS) on July 14, 2022. The data shows high-confidence research grade methane plumes from point source emitters - updated as they are identified - in keeping with JPL Open Science and Open Data policy.",
    "crumbs": [
      "Data Usage Notebooks",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#querying-the-stac-api",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n#Please use the collection name similar to the one used in STAC collection.\n\n# Name of the collection for methane emission plumes. \ncollection_name = \"emit-ch4plume-v1\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'emit-ch4plume-v1',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/emit-ch4plume-v1/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/emit-ch4plume-v1'}],\n 'title': 'Methane Point Source Plume Complexes',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-121.90662384033203,\n     -39.21891784667969,\n     151.0906524658203,\n     50.372535705566406]]},\n  'temporal': {'interval': [['2022-08-10T06:49:57+00:00',\n     '2023-10-08T16:11:15+00:00']]}},\n 'license': 'CC0-1.0',\n 'keywords': None,\n 'providers': None,\n 'summaries': {'datetime': ['2022-08-10T06:49:57Z',\n   '2022-08-10T06:50:21Z',\n   '2022-08-10T06:51:32Z',\n   '2022-08-11T04:26:30Z',\n   '2022-08-14T05:14:12Z',\n   '2022-08-15T04:28:26Z',\n   '2022-08-15T04:28:38Z',\n   '2022-08-15T07:46:45Z',\n   '2022-08-15T14:08:23Z',\n   '2022-08-16T03:44:09Z',\n   '2022-08-16T10:10:35Z',\n   '2022-08-16T10:10:58Z',\n   '2022-08-16T11:45:05Z',\n   '2022-08-17T04:32:35Z',\n   '2022-08-17T09:20:38Z',\n   '2022-08-18T03:42:31Z',\n   '2022-08-18T07:01:05Z',\n   '2022-08-18T08:35:06Z',\n   '2022-08-18T11:44:40Z',\n   '2022-08-19T09:22:31Z',\n   '2022-08-19T12:30:47Z',\n   '2022-08-20T05:28:04Z',\n   '2022-08-20T08:33:24Z',\n   '2022-08-22T06:57:13Z',\n   '2022-08-22T10:06:53Z',\n   '2022-08-23T07:45:04Z',\n   '2022-08-26T06:54:35Z',\n   '2022-08-26T08:29:15Z',\n   '2022-08-26T17:46:42Z',\n   '2022-08-27T06:07:30Z',\n   '2022-08-27T06:07:53Z',\n   '2022-08-27T07:40:30Z',\n   '2022-08-27T10:49:27Z',\n   '2022-08-28T05:18:53Z',\n   '2022-08-28T05:19:05Z',\n   '2022-08-28T05:19:17Z',\n   '2022-08-28T05:19:29Z',\n   '2022-08-28T05:19:41Z',\n   '2022-08-28T06:53:00Z',\n   '2022-08-28T06:53:24Z',\n   '2022-08-28T06:55:50Z',\n   '2022-08-28T08:28:47Z',\n   '2022-08-29T06:06:27Z',\n   '2022-08-29T06:09:13Z',\n   '2022-08-29T16:55:53Z',\n   '2022-08-30T06:52:44Z',\n   '2022-08-31T06:07:02Z',\n   '2022-09-01T03:43:18Z',\n   '2022-09-01T05:17:09Z',\n   '2022-09-01T05:17:20Z',\n   '2022-09-01T05:19:20Z',\n   '2022-09-01T08:25:25Z',\n   '2022-09-03T05:19:24Z',\n   '2022-09-03T06:52:42Z',\n   '2022-09-03T08:25:37Z',\n   '2022-09-09T07:02:54Z',\n   '2022-09-09T07:03:06Z',\n   '2023-01-07T14:38:18Z',\n   '2023-01-11T13:01:07Z',\n   '2023-01-11T13:02:18Z',\n   '2023-01-19T04:02:23Z',\n   '2023-01-21T16:18:34Z',\n   '2023-01-22T15:31:51Z',\n   '2023-01-23T08:53:11Z',\n   '2023-01-25T00:47:44Z',\n   '2023-01-26T06:27:16Z',\n   '2023-01-26T12:43:35Z',\n   '2023-01-27T16:21:04Z',\n   '2023-01-28T12:41:18Z',\n   '2023-01-28T12:41:30Z',\n   '2023-01-29T08:46:11Z',\n   '2023-01-29T13:03:21Z',\n   '2023-01-29T13:03:33Z',\n   '2023-01-30T09:35:55Z',\n   '2023-01-30T18:49:23Z',\n   '2023-01-31T05:39:24Z',\n   '2023-01-31T05:39:36Z',\n   '2023-01-31T05:43:17Z',\n   '2023-01-31T05:43:40Z',\n   '2023-01-31T08:49:13Z',\n   '2023-02-01T07:53:26Z',\n   '2023-02-02T07:08:03Z',\n   '2023-02-02T19:38:21Z',\n   '2023-02-03T06:22:56Z',\n   '2023-02-03T06:26:29Z',\n   '2023-02-03T17:14:34Z',\n   '2023-02-04T04:06:49Z',\n   '2023-02-04T04:10:09Z',\n   '2023-02-04T07:07:01Z',\n   '2023-02-04T07:11:17Z',\n   '2023-02-04T07:11:44Z',\n   '2023-02-04T08:41:39Z',\n   '2023-02-04T08:42:03Z',\n   '2023-02-05T17:12:44Z',\n   '2023-02-05T17:12:55Z',\n   '2023-02-06T16:25:14Z',\n   '2023-02-14T07:24:57Z',\n   '2023-02-14T08:57:15Z',\n   '2023-02-14T10:34:22Z',\n   '2023-02-14T10:34:57Z',\n   '2023-02-15T06:36:26Z',\n   '2023-02-15T11:19:33Z',\n   '2023-02-15T20:33:54Z',\n   '2023-02-16T13:36:26Z',\n   '2023-02-16T13:37:01Z',\n   '2023-02-17T06:32:21Z',\n   '2023-02-17T11:16:03Z',\n   '2023-02-17T20:31:34Z',\n   '2023-02-17T20:34:32Z',\n   '2023-02-18T08:56:51Z',\n   '2023-02-18T08:57:03Z',\n   '2023-02-18T08:57:39Z',\n   '2023-02-18T10:27:23Z',\n   '2023-02-18T12:02:10Z',\n   '2023-02-18T18:10:54Z',\n   '2023-02-19T06:31:55Z',\n   '2023-02-19T08:05:03Z',\n   '2023-02-19T08:05:27Z',\n   '2023-02-19T08:05:39Z',\n   '2023-02-19T09:39:08Z',\n   '2023-02-19T09:39:43Z',\n   '2023-02-19T09:41:18Z',\n   '2023-02-19T09:41:30Z',\n   '2023-02-19T19:05:39Z',\n   '2023-02-20T05:45:40Z',\n   '2023-02-20T07:15:30Z',\n   '2023-02-20T10:32:20Z',\n   '2023-02-20T19:43:24Z',\n   '2023-02-20T19:45:46Z',\n   '2023-02-20T19:47:23Z',\n   '2023-02-21T04:56:04Z',\n   '2023-02-21T06:30:01Z',\n   '2023-02-21T09:39:54Z',\n   '2023-02-22T08:51:06Z',\n   '2023-02-23T04:56:45Z',\n   '2023-02-23T04:57:20Z',\n   '2023-02-23T06:30:22Z',\n   '2023-02-23T06:30:33Z',\n   '2023-02-23T06:30:57Z',\n   '2023-02-23T06:31:09Z',\n   '2023-02-23T08:04:47Z',\n   '2023-02-23T08:04:59Z',\n   '2023-02-24T04:11:58Z',\n   '2023-02-24T08:58:31Z',\n   '2023-02-24T10:22:19Z',\n   '2023-02-24T18:10:00Z',\n   '2023-02-24T18:14:29Z',\n   '2023-02-24T18:14:41Z',\n   '2023-02-25T05:06:19Z',\n   '2023-02-25T08:05:31Z',\n   '2023-02-25T08:05:43Z',\n   '2023-02-26T04:10:22Z',\n   '2023-02-26T05:47:14Z',\n   '2023-02-27T15:57:14Z',\n   '2023-03-11T12:59:54Z',\n   '2023-03-18T04:52:50Z',\n   '2023-03-24T09:49:19Z',\n   '2023-03-24T09:49:43Z',\n   '2023-03-25T12:11:18Z',\n   '2023-03-25T13:41:23Z',\n   '2023-03-25T13:41:35Z',\n   '2023-03-25T13:41:47Z',\n   '2023-03-25T15:17:28Z',\n   '2023-03-26T08:19:55Z',\n   '2023-03-26T11:25:21Z',\n   '2023-03-26T14:30:19Z',\n   '2023-03-27T07:33:31Z',\n   '2023-03-30T09:49:34Z',\n   '2023-03-30T09:50:33Z',\n   '2023-03-30T09:50:45Z',\n   '2023-03-30T12:52:50Z',\n   '2023-03-30T12:53:02Z',\n   '2023-03-31T07:23:49Z',\n   '2023-03-31T19:49:37Z',\n   '2023-04-03T08:10:31Z',\n   '2023-04-03T08:12:19Z',\n   '2023-04-03T08:14:57Z',\n   '2023-04-03T09:45:39Z',\n   '2023-04-03T11:18:37Z',\n   '2023-04-03T11:18:49Z',\n   '2023-04-04T08:58:44Z',\n   '2023-04-04T08:59:08Z',\n   '2023-04-04T09:00:19Z',\n   '2023-04-04T09:00:31Z',\n   '2023-04-04T09:00:42Z',\n   '2023-04-05T06:35:43Z',\n   '2023-04-05T08:12:46Z',\n   '2023-04-13T09:57:29Z',\n   '2023-04-16T12:22:03Z',\n   '2023-04-16T21:37:35Z',\n   '2023-04-17T09:58:36Z',\n   '2023-04-17T09:58:48Z',\n   '2023-04-18T06:06:02Z',\n   '2023-04-18T06:06:25Z',\n   '2023-04-18T09:11:52Z',\n   '2023-04-18T09:12:16Z',\n   '2023-04-18T20:01:18Z',\n   '2023-04-19T08:23:52Z',\n   '2023-04-19T13:06:50Z',\n   '2023-04-20T06:01:48Z',\n   '2023-04-20T10:45:34Z',\n   '2023-04-21T08:23:29Z',\n   '2023-04-21T08:26:38Z',\n   '2023-04-21T10:00:17Z',\n   '2023-04-21T19:14:23Z',\n   '2023-04-22T07:34:37Z',\n   '2023-04-22T09:10:58Z',\n   '2023-04-22T09:11:10Z',\n   '2023-04-23T05:15:16Z',\n   '2023-04-23T06:44:21Z',\n   '2023-04-23T08:22:23Z',\n   '2023-04-23T10:01:36Z',\n   '2023-04-23T11:26:19Z',\n   '2023-04-23T11:29:08Z',\n   '2023-04-23T19:12:32Z',\n   '2023-04-24T04:24:44Z',\n   '2023-04-24T06:08:59Z',\n   '2023-04-24T09:08:18Z',\n   '2023-04-24T16:49:49Z',\n   '2023-04-25T03:40:28Z',\n   '2023-04-25T03:40:40Z',\n   '2023-04-25T05:12:16Z',\n   '2023-04-25T08:19:23Z',\n   '2023-04-26T02:53:02Z',\n   '2023-04-26T05:57:03Z',\n   '2023-04-26T07:31:30Z',\n   '2023-04-26T18:22:39Z',\n   '2023-04-27T06:44:04Z',\n   '2023-04-27T06:44:16Z',\n   '2023-04-27T17:36:30Z',\n   '2023-04-28T02:49:00Z',\n   '2023-04-28T05:55:24Z',\n   '2023-04-28T05:55:36Z',\n   '2023-04-28T09:03:09Z',\n   '2023-04-29T05:08:11Z',\n   '2023-04-29T05:08:23Z',\n   '2023-04-30T05:55:56Z',\n   '2023-04-30T05:56:08Z',\n   '2023-04-30T07:28:53Z',\n   '2023-04-30T16:44:07Z',\n   '2023-05-02T04:22:34Z',\n   '2023-05-02T04:22:58Z',\n   '2023-05-02T07:27:54Z',\n   '2023-05-04T13:54:42Z',\n   '2023-05-04T13:54:54Z',\n   '2023-05-26T14:21:26Z',\n   '2023-05-27T13:32:35Z',\n   '2023-05-29T11:57:40Z',\n   '2023-05-30T09:37:28Z',\n   '2023-05-30T18:57:54Z',\n   '2023-05-31T10:23:16Z',\n   '2023-05-31T10:24:39Z',\n   '2023-06-01T09:36:23Z',\n   '2023-06-02T07:19:17Z',\n   '2023-06-03T07:59:14Z',\n   '2023-06-03T07:59:26Z',\n   '2023-06-03T08:03:27Z',\n   '2023-06-03T09:32:09Z',\n   '2023-06-04T07:06:41Z',\n   '2023-06-04T18:02:05Z',\n   '2023-06-04T18:02:17Z',\n   '2023-06-04T18:02:29Z',\n   '2023-06-05T08:00:26Z',\n   '2023-06-06T05:35:23Z',\n   '2023-06-06T10:14:59Z',\n   '2023-06-07T09:26:29Z',\n   '2023-06-07T09:26:41Z',\n   '2023-06-08T05:31:35Z',\n   '2023-06-08T16:23:22Z',\n   '2023-06-08T16:23:34Z',\n   '2023-06-08T16:23:46Z',\n   '2023-06-09T04:51:06Z',\n   '2023-06-09T07:50:16Z',\n   '2023-06-09T17:10:10Z',\n   '2023-06-09T17:11:33Z',\n   '2023-06-10T03:57:59Z',\n   '2023-06-10T05:30:19Z',\n   '2023-06-10T16:21:55Z',\n   '2023-06-11T04:44:27Z',\n   '2023-06-11T04:45:26Z',\n   '2023-06-11T06:16:38Z',\n   '2023-06-12T02:24:18Z',\n   '2023-06-12T05:32:53Z',\n   '2023-06-12T16:21:03Z',\n   '2023-06-13T04:43:14Z',\n   '2023-06-13T11:13:48Z',\n   '2023-06-14T10:24:03Z',\n   '2023-06-14T10:24:15Z',\n   '2023-06-14T10:24:39Z',\n   '2023-06-14T10:24:51Z',\n   '2023-06-14T19:37:06Z',\n   '2023-06-16T11:59:49Z',\n   '2023-06-16T21:14:19Z',\n   '2023-06-16T21:14:31Z',\n   '2023-06-17T11:00:03Z',\n   '2023-06-19T08:03:47Z',\n   '2023-06-19T11:07:48Z',\n   '2023-06-20T08:44:14Z',\n   '2023-06-20T08:44:26Z',\n   '2023-06-22T11:50:37Z',\n   '2023-06-22T19:32:01Z',\n   '2023-06-22T19:32:13Z',\n   '2023-06-24T05:29:00Z',\n   '2023-06-24T05:30:36Z',\n   '2023-06-25T03:13:55Z',\n   '2023-06-25T06:16:49Z',\n   '2023-06-25T06:18:46Z',\n   '2023-06-25T07:52:48Z',\n   '2023-06-26T08:40:04Z',\n   '2023-06-26T10:12:32Z',\n   '2023-06-26T10:13:43Z',\n   '2023-06-27T03:08:22Z',\n   '2023-06-27T04:42:31Z',\n   '2023-06-27T07:52:01Z',\n   '2023-06-28T05:29:39Z',\n   '2023-06-28T05:32:36Z',\n   '2023-06-28T05:33:24Z',\n   '2023-06-28T16:19:24Z',\n   '2023-06-29T01:34:53Z',\n   '2023-06-29T01:35:16Z',\n   '2023-06-29T04:40:14Z',\n   '2023-06-29T04:40:50Z',\n   '2023-06-29T04:41:01Z',\n   '2023-06-29T06:14:16Z',\n   '2023-06-29T06:15:03Z',\n   '2023-06-29T06:16:26Z',\n   '2023-06-29T06:16:38Z',\n   '2023-06-29T06:16:50Z',\n   '2023-06-29T06:17:27Z',\n   '2023-06-29T06:18:50Z',\n   '2023-06-29T15:40:42Z',\n   '2023-06-30T07:06:49Z',\n   '2023-06-30T10:23:58Z',\n   '2023-06-30T16:17:28Z',\n   '2023-07-25T10:05:32Z',\n   '2023-07-25T11:39:04Z',\n   '2023-07-25T11:39:27Z',\n   '2023-07-29T10:02:52Z',\n   '2023-07-29T10:06:30Z',\n   '2023-07-29T13:08:54Z',\n   '2023-07-29T13:10:41Z',\n   '2023-07-29T20:53:42Z',\n   '2023-07-30T09:14:51Z',\n   '2023-07-30T10:48:00Z',\n   '2023-07-30T12:20:47Z',\n   '2023-07-31T06:58:04Z',\n   '2023-07-31T13:07:06Z',\n   '2023-07-31T19:18:10Z',\n   '2023-07-31T19:18:22Z',\n   '2023-07-31T19:18:34Z',\n   '2023-07-31T19:18:46Z',\n   '2023-08-01T09:16:36Z',\n   '2023-08-01T09:16:48Z',\n   '2023-08-02T08:25:47Z',\n   '2023-08-02T08:26:10Z',\n   '2023-08-02T08:29:53Z',\n   '2023-08-02T11:34:11Z',\n   '2023-08-03T09:21:03Z',\n   '2023-08-04T05:22:23Z',\n   '2023-08-04T08:25:59Z',\n   '2023-08-04T08:29:48Z',\n   '2023-08-04T11:31:11Z',\n   '2023-08-04T17:41:29Z',\n   '2023-08-04T17:41:41Z',\n   '2023-08-05T06:08:27Z',\n   '2023-08-05T07:38:38Z',\n   '2023-08-05T07:40:37Z',\n   '2023-08-05T09:08:52Z',\n   '2023-08-05T09:09:04Z',\n   '2023-08-05T09:09:15Z',\n   '2023-08-06T03:46:59Z',\n   '2023-08-06T03:48:03Z',\n   '2023-08-06T06:52:31Z',\n   '2023-08-07T07:35:11Z',\n   '2023-08-07T07:36:22Z',\n   '2023-08-07T09:06:55Z',\n   '2023-08-09T04:30:25Z',\n   '2023-08-09T06:01:51Z',\n   '2023-08-09T06:03:49Z',\n   '2023-08-09T07:32:00Z',\n   '2023-08-09T07:32:12Z',\n   '2023-08-09T16:50:40Z',\n   '2023-08-10T05:15:16Z',\n   '2023-08-10T05:15:28Z',\n   '2023-08-10T05:15:52Z',\n   '2023-08-10T06:51:40Z',\n   '2023-08-14T10:08:19Z',\n   '2023-08-14T14:51:26Z',\n   '2023-08-14T14:52:25Z',\n   '2023-08-15T09:20:26Z',\n   '2023-08-16T10:10:38Z',\n   '2023-08-16T10:10:50Z',\n   '2023-08-16T11:48:56Z',\n   '2023-08-17T09:24:16Z',\n   '2023-08-17T10:58:03Z',\n   '2023-08-17T20:15:10Z',\n   '2023-08-18T21:00:19Z',\n   '2023-08-23T09:17:47Z',\n   '2023-08-23T09:23:49Z',\n   '2023-08-23T10:56:29Z',\n   '2023-08-23T17:06:09Z',\n   '2023-08-24T07:00:37Z',\n   '2023-08-24T07:00:49Z',\n   '2023-08-24T07:01:01Z',\n   '2023-08-24T08:39:07Z',\n   '2023-08-24T08:39:31Z',\n   '2023-08-24T17:53:37Z',\n   '2023-08-24T17:54:01Z',\n   '2023-08-25T06:13:13Z',\n   '2023-08-25T07:47:43Z',\n   '2023-08-25T07:50:05Z',\n   '2023-08-25T17:05:57Z',\n   '2023-08-25T17:06:09Z',\n   '2023-08-26T08:35:22Z',\n   '2023-08-26T08:35:46Z',\n   '2023-08-26T10:06:04Z',\n   '2023-08-26T10:07:35Z',\n   '2023-08-26T10:08:34Z',\n   '2023-08-28T07:02:35Z',\n   '2023-08-28T07:03:10Z',\n   '2023-08-28T08:34:21Z',\n   '2023-09-08T14:10:43Z',\n   '2023-09-24T11:42:53Z',\n   '2023-09-24T11:44:13Z',\n   '2023-09-25T14:01:34Z',\n   '2023-10-03T07:42:03Z',\n   '2023-10-03T07:46:41Z',\n   '2023-10-03T07:47:04Z',\n   '2023-10-03T07:47:16Z',\n   '2023-10-04T17:47:32Z',\n   '2023-10-04T17:47:44Z',\n   '2023-10-06T06:55:57Z',\n   '2023-10-06T08:27:35Z',\n   '2023-10-06T10:02:06Z',\n   '2023-10-08T16:11:15Z']},\n 'description': 'Methane plume complexes from point source emitters',\n 'item_assets': {'ch4-plume-emissions': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Methane Plume Complex',\n   'description': 'Methane plume complexes from point source emitters.'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': False,\n 'dashboard:time_density': 'day'}\n\n\nExamining the contents of our collection under the temporal variable, we note that data is available from August 2022 to May 2023. By looking at the dashboard: time density, we can see that observations are conducted daily and non-periodically (i.e., there are plumes emissions for multiple places on the same dates).\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 752 items\n\n\n\n# Examining the first item in the collection\nitems[0]\n\n{'id': 'EMIT_L2B_CH4PLM_001_20231008T161115_001520',\n 'bbox': [-103.94950373078798,\n  31.803782488999254,\n  -103.9419124755044,\n  31.811373744282843],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/emit-ch4plume-v1'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/emit-ch4plume-v1'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/emit-ch4plume-v1/items/EMIT_L2B_CH4PLM_001_20231008T161115_001520'}],\n 'assets': {'ch4-plume-emissions': {'href': 's3://lp-prod-protected/EMITL2BCH4PLM.001/EMIT_L2B_CH4PLM_001_20231008T161115_001520/EMIT_L2B_CH4PLM_001_20231008T161115_001520.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Methane Plume Complex',\n   'proj:bbox': [-103.94950373078798,\n    31.803782488999254,\n    -103.9419124755044,\n    31.811373744282843],\n   'proj:epsg': 4326.0,\n   'proj:shape': [14.0, 14.0],\n   'description': 'Methane plume complexes from point source emitters.',\n   'raster:bands': [{'scale': 1.0,\n     'nodata': -9999.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 2034.2767333984375,\n      'min': -638.1588745117188,\n      'count': 11.0,\n      'buckets': [4.0, 17.0, 15.0, 18.0, 14.0, 13.0, 3.0, 8.0, 5.0, 3.0]},\n     'statistics': {'mean': 469.7673828125,\n      'stddev': 634.4945451235177,\n      'maximum': 2034.2767333984375,\n      'minimum': -638.1588745117188,\n      'valid_percent': 51.02040816326531}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-103.94950373078798, 31.803782488999254],\n      [-103.9419124755044, 31.803782488999254],\n      [-103.9419124755044, 31.811373744282843],\n      [-103.94950373078798, 31.811373744282843],\n      [-103.94950373078798, 31.803782488999254]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.7/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.000542232520256367,\n    0.0,\n    -103.94950373078798,\n    0.0,\n    -0.000542232520256367,\n    31.811373744282843,\n    0.0,\n    0.0,\n    1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-103.94950373078798, 31.803782488999254],\n    [-103.9419124755044, 31.803782488999254],\n    [-103.9419124755044, 31.811373744282843],\n    [-103.94950373078798, 31.811373744282843],\n    [-103.94950373078798, 31.803782488999254]]]},\n 'collection': 'emit-ch4plume-v1',\n 'properties': {'datetime': '2023-10-08T16:11:15+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\nBelow, we are entering the minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#exploring-methane-emission-plumes-ch₄-using-the-raster-api",
    "href": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#exploring-methane-emission-plumes-ch₄-using-the-raster-api",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "Exploring Methane Emission Plumes (CH₄) using the Raster API",
    "text": "Exploring Methane Emission Plumes (CH₄) using the Raster API\nIn this notebook, we will explore global methane emission plumes from point sources. We will visualize the outputs on a map using folium.\n\n# To access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"id\"][20:]: item for item in items} \nasset_name = \"ch4-plume-emissions\"\n\n\n# Fetching the min and max values for a specific item\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\nNow we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this for only one item so that we can visualize the event.\n\n# Select the item ID which you want to visualize. Item ID is in the format yyyymmdd followed by the timestamp. This ID can be extracted from the COG name as well.\nitem_id = \"20230418T200118_000829\"\ncolor_map = \"magma\"\nmethane_plume_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[item_id]['collection']}&item={items[item_id]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\nmethane_plume_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=emit-ch4plume-v1&item=EMIT_L2B_CH4PLM_001_20230418T200118_000829&assets=ch4-plume-emissions&color_formula=gamma+r+1.05&colormap_name=magma&rescale=-638.1588745117188%2C2034.2767333984375'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-104.76285251117253,\n  39.85322425220504,\n  -104.74658553556483,\n  39.86515336765068],\n 'center': [-104.75471902336868, 39.85918880992786, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#visualizing-ch₄-emission-plume",
    "href": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#visualizing-ch₄-emission-plume",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "Visualizing CH₄ Emission Plume",
    "text": "Visualizing CH₄ Emission Plume\n\n# We will import folium to map and folium.plugins to allow side-by-side mapping\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for plume Layer\nmap_ = folium.Map(location=(methane_plume_tile[\"center\"][1], methane_plume_tile[\"center\"][0]), zoom_start=13)\n\n# December 2001\nmap_layer = TileLayer(\n    tiles=methane_plume_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=1,\n)\nmap_layer.add_to(map_)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#summary",
    "href": "user_data_notebooks/emit-ch4plume-v1_User_Notebook.html#summary",
    "title": "EMIT Methane Point Source Plume Complexes",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully explored, analyzed, and visualized the STAC collection for EMIT methane emission plumes.",
    "crumbs": [
      "Data Usage Notebooks",
      "EMIT Methane Point Source Plume Complexes"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the gridded methane emissions data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#approach",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#approach",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the gridded methane emissions data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#about-the-data",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "About the Data",
    "text": "About the Data\nThe gridded EPA U.S. anthropogenic methane greenhouse gas inventory (gridded GHGI) includes spatially disaggregated (0.1 deg x 0.1 deg or approximately 10 x 10 km resolution) maps of annual anthropogenic methane emissions (for the contiguous United States (CONUS), consistent with national annual U.S. anthropogenic methane emissions reported in the U.S. EPA Inventory of U.S. Greenhouse Gas Emissions and Sinks (U.S. GHGI). This V2 Express Extension dataset contains methane emissions provided as fluxes, in units of molecules of methane per square cm per second, for over 25 individual emission source categories, including those from agriculture, petroleum and natural gas systems, coal mining, and waste. The data have been converted from their original NetCDF format to Cloud-Optimized GeoTIFF (COG) for use in the US GHG Center, thereby enabling user exploration of spatial anthropogenic methane emissions and their trends.",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#querying-the-stac-api",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# Please use the collection name similar to the one used in STAC collection.\n\n# Name of the collection for gridded methane dataset. \ncollection_name = \"epa-ch4emission-yeargrid-v2\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\nExamining the contents of our collection under the temporal variable, we see that the data is available from January 2012 to December 2020. By looking at the dashboard:time density, we observe that the periodic frequency of these observations is yearly.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\n\n# Examining the first item in the collection\nitems[0]\n\nThis makes sense as there are 9 years between 2012 - 2020, meaning 9 records in total.\nBelow, we enter minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#exploring-changes-in-methane-ch4-levels-using-the-raster-api",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#exploring-changes-in-methane-ch4-levels-using-the-raster-api",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "Exploring Changes in Methane (CH4) Levels Using the Raster API",
    "text": "Exploring Changes in Methane (CH4) Levels Using the Raster API\nIn this notebook, we will explore the impacts of methane emissions and by examining changes over time in urban regions. We will visualize the outputs on a map using folium.\n\n# To access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"datetime\"][:7]: item for item in items} \nasset_name = \"surface-coal\"\n\n\n# Fetching the min and max values for a specific item\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\n\nitems\n\nNow, we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for January 2018 and again for January 2012, so that we can visualize each event independently.\n\ncolor_map = \"rainbow\" # please select the color ramp from matplotlib library.\njanuary_2018_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2018-01']['collection']}&item={items['2018-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\njanuary_2018_tile\n\n\njanuary_2012_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2012-01']['collection']}&item={items['2012-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\njanuary_2012_tile",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#visualizing-ch₄-emissions",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#visualizing-ch₄-emissions",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "Visualizing CH₄ emissions",
    "text": "Visualizing CH₄ emissions\n\n# We will import folium to map and folium.plugins to allow side-by-side mapping\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for CH₄ Layer\n# Centre of map [latitude,longitude]\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n# January 2018\nmap_layer_2018 = TileLayer(\n    tiles=january_2018_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.7,\n)\nmap_layer_2018.add_to(map_.m1)\n\n# January 2012\nmap_layer_2012 = TileLayer(\n    tiles=january_2012_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.7,\n)\nmap_layer_2012.add_to(map_.m2)\n\n# visualising the map\nmap_",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the gridded methane emission (Domestic Wastewater Treatment & Discharge (5D)) time series (January 2000 -December 2021) available for the Dallas, Texas area of the U.S. We can plot the data set using the code below:\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 10))\n\n\nplt.plot(\n    df[\"date\"],\n    df[\"max\"],\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"Max monthly CO₂ emissions\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"CH4 emissions Molecules CH₄/cm²/s\")\nplt.title(\"CH4 gridded methane emission from Domestic Wastewater Treatment & Discharge (5D) for Texas, Dallas (2012-202)\")\n\n\nprint(items[2][\"properties\"][\"datetime\"])\n\n\ntile_2016 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\ntile_2016\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nimport folium\n\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=8,\n)\n\nmap_layer = TileLayer(\n    tiles=tile_2016[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.5\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\naoi_map_bbox",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#summary",
    "href": "user_data_notebooks/epa-ch4emission-grid-v2express_User_Notebook.html#summary",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully explored, analyzed, and visualized the STAC collection for gridded methane emissions.",
    "crumbs": [
      "Data Usage Notebooks",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "data_workflow/odiac-ffco2-monthgrid-v2022_Data_Flow.html",
    "href": "data_workflow/odiac-ffco2-monthgrid-v2022_Data_Flow.html",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "",
    "text": "ODIAC Fossil Fuel CO₂ Emissions\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "data_workflow/eccodarwin-co2flux-monthgrid-v5_Data_Flow.html",
    "href": "data_workflow/eccodarwin-co2flux-monthgrid-v5_Data_Flow.html",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "",
    "text": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "data_workflow/oco2geos-co2-daygrid-v10r_Data_Flow.html",
    "href": "data_workflow/oco2geos-co2-daygrid-v10r_Data_Flow.html",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "",
    "text": "OCO-2 GEOS Column CO₂ Concentrations\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "data_workflow/oco2-mip-co2budget-yeargrid-v1_Data_Flow.html",
    "href": "data_workflow/oco2-mip-co2budget-yeargrid-v1_Data_Flow.html",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "",
    "text": "OCO-2 MIP Top-Down CO₂ Budgets\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "data_workflow/casagfed-carbonflux-monthgrid-v3_Data_Flow.html",
    "href": "data_workflow/casagfed-carbonflux-monthgrid-v3_Data_Flow.html",
    "title": "CASA-GFED3 Land Carbon Flux - Data Workflow",
    "section": "",
    "text": "CASA-GFED3 Land Carbon Flux - Data Workflow\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "CASA-GFED3 Land Carbon Flux - Data Workflow"
    ]
  },
  {
    "objectID": "data_workflow/sedac-popdensity-yeargrid5yr-v4.11_Data_Flow.html",
    "href": "data_workflow/sedac-popdensity-yeargrid5yr-v4.11_Data_Flow.html",
    "title": "SEDAC Gridded World Population Data",
    "section": "",
    "text": "SEDAC Gridded World Population Data\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "SEDAC Gridded World Population Data"
    ]
  },
  {
    "objectID": "data_workflow/emit-ch4plume-v1_Data_Flow.html",
    "href": "data_workflow/emit-ch4plume-v1_Data_Flow.html",
    "title": "EMIT methane point source plume complexes",
    "section": "",
    "text": "EMIT methane point source plume complexes\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "EMIT methane point source plume complexes"
    ]
  },
  {
    "objectID": "data_workflow/gosat-based-ch4budget-yeargrid-v1_Data_Flow.html",
    "href": "data_workflow/gosat-based-ch4budget-yeargrid-v1_Data_Flow.html",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "",
    "text": "GOSAT-based Top-down Total and Natural Methane Emissions\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "data_workflow/epa-ch4emission-grid-v2express_Data_Flow.html",
    "href": "data_workflow/epa-ch4emission-grid-v2express_Data_Flow.html",
    "title": "Gridded Anthropogenic Methane Emissions Inventory",
    "section": "",
    "text": "Gridded Anthropogenic Methane Emissions Inventory\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "data_workflow/tm54dvar-ch4flux-monthgrid-v1_Data_Flow.html",
    "href": "data_workflow/tm54dvar-ch4flux-monthgrid-v1_Data_Flow.html",
    "title": "TM5-4DVar Isotopic CH₄ Inverse Fluxes",
    "section": "",
    "text": "TM5-4DVar Isotopic CH₄ Inverse Fluxes\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "TM5-4DVar Isotopic CH₄ Inverse Fluxes"
    ]
  },
  {
    "objectID": "data_workflow/lpjwsl-wetlandch4-grid-v1_Data_Flow.html",
    "href": "data_workflow/lpjwsl-wetlandch4-grid-v1_Data_Flow.html",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "",
    "text": "Wetland Methane Emissions, LPJ-wsl Model\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "data_workflow/noaa-insitu_Data_Flow.html",
    "href": "data_workflow/noaa-insitu_Data_Flow.html",
    "title": "Atmospheric Carbon Dioxide Concentrations from the NOAA Global Monitoring Laboratory",
    "section": "",
    "text": "Atmospheric Carbon Dioxide Concentrations from the NOAA Global Monitoring Laboratory\n\n\n\nData Flow Diagram Extending From Acquisition/Creation to User Delivery\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Workflow",
      "Atmospheric Carbon Dioxide Concentrations from the NOAA Global Monitoring Laboratory"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Air-Sea CO₂ Flux, ECCO-Darwin Model v5 Data product.\nPass the STAC item into the raster API /stac/tilejson.json endpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#approach",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#approach",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Air-Sea CO₂ Flux, ECCO-Darwin Model v5 Data product.\nPass the STAC item into the raster API /stac/tilejson.json endpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#about-the-data",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "About the Data",
    "text": "About the Data\nThe ocean is a major sink for atmospheric carbon dioxide (CO2), largely due to the presence of phytoplankton that use the CO₂ to grow. Studies have shown that global ocean CO₂ uptake has increased over recent decades, however there is uncertainty in the various mechanisms that affect ocean CO₂ flux and storage and how the ocean carbon sink will respond to future climate change. Because CO₂ fluxes can vary significantly across space and time, combined with deficiencies in ocean and atmosphere CO₂ observations, there is a need for models that can thoroughly represent these processes. Ocean biogeochemical models (OBMs) have the ability to resolve the physical and biogeochemical mechanisms contributing to spatial and temporal variations in air-sea CO₂ fluxes but previous OBMs do not integrate observations to improve model accuracy and have not been able to operate on the seasonal and multi-decadal timescales needed to adequately characterize these processes. The ECCO-Darwin model is an OBM that assimilates Estimating the Circulation and Climate of the Ocean (ECCO) consortium ocean circulation estimates and biogeochemical processes from the Massachusetts Institute of Technology (MIT) Darwin Project. A pilot study using ECCO-Darwin was completed by Brix et al. (2015) however an improved version of the model was developed by Carroll et al. (2020) in which issues present in the first model were addressed using data assimilation and adjustments were made to initial conditions and biogeochemical parameters. The updated ECCO-Darwin model was compared with interpolation-based products to estimate surface ocean partial pressure (pCO2) and air-sea CO₂ flux. This dataset contains the gridded global, monthly mean air-sea CO₂ fluxes from version 5 of the ECCO-Darwin model. The data are available at ~1/3° horizontal resolution at the equator (~18 km at high latitudes) from January 2020 through December 2022.\nFor more information regarding this dataset, please visit the Air-Sea CO₂ Flux ECCO-Darwin Model Dataset Landing Page.",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#querying-the-stac-api",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\nFirst, we are going to import the required libraries. Once imported, they allow better executing a query in the GHG Center Spatio Temporal Asset Catalog (STAC) Application Programming Interface (API) where the granules for this collection are stored.\n\n# Import the following libraries\nimport requests\nimport folium\nimport folium.plugins\nfrom folium import Map, TileLayer \nfrom pystac_client import Client \nimport branca \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n# Provide the STAC and RASTER API endpoints\n# The endpoint is referring to a location within the API that executes a request on a data collection nesting on the server.\n\n# The STAC API is a catalog of all the existing data collections that are stored in the GHG Center.\nSTAC_API_URL = \"http://ghg.center/api/stac\"\n\n# The RASTER API is used to fetch collections for visualization\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# The collection name is used to fetch the dataset from the STAC API. First, we define the collection name as a variable \n# Name of the collection for ECCO Darwin CO₂ flux monthly emissions\ncollection_name = \"eccodarwin-co2flux-monthgrid-v5\"\n\n\n# Fetch the collection from the STAC API using the appropriate endpoint\n# The 'requests' library allows a HTTP request possible\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\n\n# Print the properties of the collection to the console\ncollection\n\nExamining the contents of our collection under the temporal variable, we see that the data is available from January 2020 to December 2022. By looking at the dashboard:time density, we observe that the data is periodic with monthly time density.\n\n# Create a function that would search for a data collection in the US GHG Center STAC API\n\n# First, we need to define the function\n# The name of the function is \"get_item_count\" \n# The argument that will be passed to the defined function is \"collection_id\"\ndef get_item_count(collection_id):\n\n    # Set a counter for the number of items existing in the collection \n    count = 0 \n\n    # Define the path to retrieve the granules (items) of the collection of interest (Air-Sea CO2 Flux ECCO-Darwin model) in the STAC API\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\" \n\n    # Run a while loop to make HTTP requests until there are no more URLs associated with the collection (Air-Sea CO2 Flux ECCO-Darwin model) in the STAC API\n    while True:\n\n        # Retrieve information about the granules by sending a \"get\" request to the STAC API using the defined collection path \n        response = requests.get(items_url) \n\n        # If the items do not exist, print an error message and quit the loop\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        # Return the results of the HTTP response as JSON\n        stac = response.json()\n\n        # Increase the \"count\" by the number of items (granules) returned in the response\n        count += int(stac[\"context\"].get(\"returned\", 0))\n\n        # Retrieve information about the next URL associated with the collection (Air-Sea CO2 Flux ECCO-Darwin model) in the STAC API (if applicable)\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        # Exit the loop if there are no other URLs\n        if not next:\n            break\n        \n        # Ensure the information gathered by other STAC API links associated with the collection are added to the original path\n        # \"href\" is the identifier for each of the tiles stored in the STAC API\n        items_url = next[0][\"href\"]\n\n    # Return the information about the total number of granules found associated with the collection (Air-Sea CO2 Flux ECCO-Darwin model)\n    return count\n\n\n# Apply the function created above \"get_item_count\" to the Air-Sea CO2 Flux ECCO-Darwin collection\nnumber_of_items = get_item_count(collection_name)\n\n# Get the information about the number of granules found in the collection\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\n\n# Print the total number of items (granules) found\nprint(f\"Found {len(items)} items\")\n\n\n# Examine the first item in the collection\n# Keep in mind that a list starts from 0, 1, 2... therefore items[0] is referring to the first item in the list/collection\nitems[0]",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#exploring-changes-in-co₂-levels-using-the-raster-api",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#exploring-changes-in-co₂-levels-using-the-raster-api",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "Exploring Changes in CO₂ Levels Using the Raster API",
    "text": "Exploring Changes in CO₂ Levels Using the Raster API\nIn this notebook, we will explore the global changes of CO₂ flux over time in urban regions. We will visualize the outputs on a map using folium.\n\n# Now we create a dictionary where the start datetime values for each granule is queried more explicitly by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"start_datetime\"]: item for item in items}\n\n# Next, we need to specify the asset name for this collection.\n# The asset name is referring to the raster band containing the pixel values for the parameter of interest.\n# For the case of the Air-Sea CO2 Flux ECCO-Darwin collection, the parameter of interest is “co2”.\nasset_name = \"co2\"\n\nBelow, we are entering the minimum and maximum values to provide our upper and lower bounds in the rescale_values.\n\n# Fetch the minimum and maximum values for the CO2 value range\nrescale_values = {\"max\":0.0007, \"min\":-0.0007}\n\nNow, we will pass the item id, collection name, asset name, and the rescaling factor to the Raster API endpoint. This step is done twice so that we can visualize two arbitrary events independently.\n\n# Choose a color map for displaying the first observation (event)\n# Please refer to matplotlib library if you'd prefer choosing a different color ramp.\n# For more information on Colormaps in Matplotlib, please visit https://matplotlib.org/stable/users/explain/colors/colormaps.html\ncolor_map = \"magma\"\n\n# Make a GET request to retrieve information for the December 2022 tile which is the 1st item in the collection\n# To retrieve the first item in the collection we use \"0\" in the \"(items.keys())[0]\" statement \n# If you want to select another item (granule) in the list (collection), you can refer to the Data Browser in the U.S. Greenhouse Gas Center website  \n# URL to the Air-Sea CO2 Flux ECCO-Darwin collection in the US GHG Center: https://dljsq618eotzp.cloudfront.net/browseui/#eccodarwin-co2flux-monthgrid-v5/\n\n# A GET request is made for the December 2022 tile\ndecember_2022_tile = requests.get(\n\n    # Pass the collection name, the item number in the list, and its ID\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[list(items.keys())[0]]['collection']}&item={items[list(items.keys())[0]]['id']}\"\n\n    # Pass the asset name\n    f\"&assets={asset_name}\"\n\n    # Pass the color formula and colormap for custom visualization\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n\n    # Pass the minimum and maximum values for rescaling \n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n\n# Return the response in JSON format\n).json()\n\n# Print the properties of the retrieved granule to the console\ndecember_2022_tile\n\n\n# Make a GET request to retrieve information for the April 2021 tile which is the 21th item in the collection\n# To retrieve the 21st item in the collection we use \"20\" in the \"(items.keys())[20]\" statement \n# Keep in mind that a list starts from 0, therefore \"items[20]\" is referring to the 21st item in the list/collection\n\n# A GET request is made for the April 2021 tile\napril_2021_tile = requests.get(\n\n    # Pass the collection name, the item number in the list, and its ID\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[list(items.keys())[20]]['collection']}&item={items[list(items.keys())[20]]['id']}\"\n\n    # Pass the asset name\n    f\"&assets={asset_name}\"\n\n    # Pass the color formula and colormap for custom visualization\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n\n    # Pass the minimum and maximum values for rescaling\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n\n# Return the response in JSON format\n).json()\n\n# Print the properties of the retrieved granule to the console\napril_2021_tile",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#visualizing-co₂-flux-emissions",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#visualizing-co₂-flux-emissions",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "Visualizing CO₂ flux Emissions",
    "text": "Visualizing CO₂ flux Emissions\n\n# For this study we are going to compare the CO2 level in 2021 and 2022 along the coast of California\n# To change the location, you can simply insert the latitude and longitude of the area of your interest in the \"location=(LAT, LONG)\" statement\n\n# Set the initial zoom level and center of map for both tiles\n# 'folium.plugins' allows mapping side-by-side\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n\n# Define the first map layer with the CO2 Flux data for December 2022\nmap_layer_1 = TileLayer(\n    tiles=december_2022_tile[\"tiles\"][0], # Path to retrieve the tile\n    attr=\"GHG\", # Set the attribution \n    name='December 2022 CO2 Flux', # Title for the layer\n    overlay=True, # The layer can be overlaid on the map\n    opacity=0.8, # Adjust the transparency of the layer\n)\n# Add the first layer to the Dual Map \nmap_layer_1.add_to(map_.m1)\n\n\n# Define the second map layer with the CO2 Flux data for April 2021\nmap_layer_2 = TileLayer(\n    tiles=april_2021_tile[\"tiles\"][0], # Path to retrieve the tile\n    attr=\"GHG\", # Set the attribution \n    name='April 2021 CO2 Flux', # Title for the layer\n    overlay=True, # The layer can be overlaid on the map\n    opacity=0.8, # Adjust the transparency of the layer\n)\n# Add the second layer to the Dual Map \nmap_layer_2.add_to(map_.m2)\n\n\n# Display data markers (titles) on both maps\nfolium.Marker((40, 5.0), tooltip=\"both\").add_to(map_)\n\n# Add a layer control to switch between map layers\nfolium.LayerControl(collapsed=False).add_to(map_)\n\n# Add a legend to the dual map using the 'branca' library\n# Note: the inserted legend is representing the minimum and maximum values for both tiles\n# Minimum value = -0.0007, maximum value = 0.0007\ncolormap = branca.colormap.LinearColormap(colors=[\"#0000FF\", \"#3399FF\", \"#66CCFF\", \"#FFFFFF\", \"#FF66CC\", \"#FF3399\", \"#FF0000\"], vmin=-0.0007, vmax=0.0007) \n\n# Add the data unit as caption \ncolormap.caption = 'Millimoles per meter squared per second (mmol m²/s)'\n\n# Define custom tick values for the legend bar\ntick_val = [-0.0007, -0.00035, 0, 0.00035, 0.0007]\n\n# Create a HTML representation\nlegend_html = colormap._repr_html_()\n\n# Create a customized HTML structure for the legend\nlegend_html = f'''\n&lt;div style=\"position: fixed; bottom: 50px; left: 50px; z-index: 1000; width: 400px; height: auto; background-color: rgba(255, 255, 255, 0.8);\n             border-radius: 5px; border: 1px solid grey; padding: 10px; font-size: 14px; color: black;\"&gt;\n    &lt;b&gt;{colormap.caption}&lt;/b&gt;&lt;br&gt;\n    &lt;div style=\"display: flex; justify-content: space-between;\"&gt;\n        &lt;div&gt;{tick_val[0]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[1]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[2]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[3]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[4]}&lt;/div&gt; \n    &lt;/div&gt;\n    &lt;div style=\"background: linear-gradient(to right,\n                {'#0000FF'}, {'#3399FF'} {20}%,\n                {'#3399FF'} {20}%, {'#66CCFF'} {40}%,\n                {'#66CCFF'} {40}%, {'#FFFFFF'} {50}%,\n                {'#FFFFFF'} {50}%, {'#FF66CC'} {80}%,\n                {'#FF66CC'} {80}%, {'#FF3399'}); height: 10px;\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n'''\n\n# Display the legend and caption on the map\nmap_.get_root().html.add_child(folium.Element(legend_html))\n\n# Visualize the Dual Map\nmap_",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the fossil fuel emission time series (January 2020 -December 2022) available for the Coastal California area of the U.S. We can plot the data set using the code below:\n\n# Sort the DataFrame by the datetime column so the plot is displaying the values from left to right (2020 -&gt; 2022)\ndf_sorted = df.sort_values(by=\"datetime\")\n\n# Plot the timeseries analysis of the monthly air-sea CO₂ flux changes along the coast of California\n# Figure size: 20 representing the width, 10 representing the height\nfig = plt.figure(figsize=(20, 10))\n\nplt.plot(\n    df_sorted[\"datetime\"],    # X-axis: sorted datetime\n    df_sorted[\"max\"],         # Y-axis: maximum CO₂ value\n    color=\"purple\",           # Line color\n    linestyle=\"-\",            # Line style\n    linewidth=1,              # Line width\n    label=\"CO2 Emissions\",    # Legend label\n)\n\n# Display legend\nplt.legend()\n\n# Insert label for the X-axis\nplt.xlabel(\"Years\")\n\n# Insert label for the Y-axis\nplt.ylabel(\"CO2 Emissions mmol m²/s\")\n\n# Insert title for the plot\nplt.title(\"CO2 Emission Values for Coastal California (2020-2022)\")\n\n# Rotate x-axis labels to avoid cramping\nplt.xticks(rotation=90)\n\n# Add data citation\nplt.text(\n    df_sorted[\"datetime\"].iloc[0],           # X-coordinate of the text (first datetime value)\n    df_sorted[\"max\"].min(),                  # Y-coordinate of the text (minimum CO2 value)\n\n    # Text to be displayed\n    \"Source: NASA Air-Sea CO₂ Flux, ECCO-Darwin Model v5\",                   \n    fontsize=12,                             # Font size\n    horizontalalignment=\"left\",              # Horizontal alignment\n    verticalalignment=\"bottom\",              # Vertical alignment\n    color=\"blue\",                            # Text color\n)\n\n# Plot the time series\nplt.show()\n\nLooking at the plot above, we notice that CO₂ emission level increases particularly around 2022-09-01 for the defined area of interest. To take a closer look at monthly CO₂ flux variability across this region, we are going to retrieve and display data collected during the September 2022 observation.\n\n# The 2022-09-01 observation is the 4th item in the list. \n# Considering that a list starts with \"0\", we need to insert \"3\" in the \"items[3]\" statement\nprint(items[3][\"properties\"][\"start_datetime\"])\n\n\n# A GET request is made for the September 2022 tile\nSeptember2022_co2_flux = requests.get(\n\n    # Pass the collection name, the item number in the list, and its ID\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[3]['collection']}&item={items[3]['id']}\"\n\n    # Pass the asset name\n    f\"&assets={asset_name}\"\n\n    # Pass the color formula and colormap for custom visualization\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n\n    # Pass the minimum and maximum values for rescaling\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n\n# Return the response in JSON format\n).json()\n\n# Print the properties of the retrieved granule to the console  \nSeptember2022_co2_flux\n\n\n# Create a new map to display the September 2022 tile\naoi_map_bbox = Map(\n\n    # Base map is set to OpenStreetMap\n    tiles=\"OpenStreetMap\",\n\n    # Set the center of the map\n    location=[\n        34, -120\n    ],\n\n    # Set the zoom value\n    zoom_start=5.5,\n)\n\n# Define the map layer with the CO2 flux data for September 2022\nmap_layer = TileLayer(\n    tiles=September2022_co2_flux[\"tiles\"][0], # Path to retrieve the tile\n    attr=\"GHG\", # Set the attribution\n    opacity = 0.7, # Adjust the transparency of the layer\n)\n\n# Add the layer to the map\nmap_layer.add_to(aoi_map_bbox)\n\n# Add a legend to the map\n# Minimum value = -0.0007, maximum value = 0.0007\ncolormap = branca.colormap.LinearColormap(colors=[\"#0000FF\", \"#3399FF\", \"#66CCFF\", \"#FFFFFF\", \"#FF66CC\", \"#FF3399\", \"#FF0000\"], vmin=-0.0007, vmax=0.0007) \n\n# Add the data unit as caption \ncolormap.caption = 'Millimoles per meter squared per second (mmol m²/s)'\n\n# Define custom tick values for the legend bar\ntick_val = [-0.0007, -0.00035, 0, 0.00035, 0.0007]\n\n# Create a HTML representation\nlegend_html = colormap._repr_html_()\n\n# Create a customized HTML structure for the legend\nlegend_html = f'''\n&lt;div style=\"position: fixed; bottom: 50px; left: 50px; z-index: 1000; width: 400px; height: auto; background-color: rgba(255, 255, 255, 0.8);\n             border-radius: 5px; border: 1px solid grey; padding: 10px; font-size: 14px; color: black;\"&gt;\n    &lt;b&gt;{colormap.caption}&lt;/b&gt;&lt;br&gt;\n    &lt;div style=\"display: flex; justify-content: space-between;\"&gt;\n        &lt;div&gt;{tick_val[0]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[1]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[2]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[3]}&lt;/div&gt; \n        &lt;div&gt;{tick_val[4]}&lt;/div&gt; \n    &lt;/div&gt;\n    &lt;div style=\"background: linear-gradient(to right,\n                {'#0000FF'}, {'#3399FF'} {20}%,\n                {'#3399FF'} {20}%, {'#66CCFF'} {40}%,\n                {'#66CCFF'} {40}%, {'#FFFFFF'} {50}%,\n                {'#FFFFFF'} {50}%, {'#FF66CC'} {80}%,\n                {'#FF66CC'} {80}%, {'#FF3399'}); height: 10px;\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n'''\n\n# Display the legend and caption on the map\naoi_map_bbox.get_root().html.add_child(folium.Element(legend_html))\n\n# Add the title to the map\ntitle_html = '''\n&lt;div style=\"position: fixed; top: 10px; right: 10px; z-index: 1000; background-color: rgba(255, 255, 255, 0.8); border-radius: 5px; border: 1px solid grey; padding: 10px;\"&gt;\n    &lt;b&gt;Air-Sea CO₂ Flux, ECCO-Darwin&lt;/b&gt;&lt;br&gt;\n    September 2022\n&lt;/div&gt;\n'''\n# Display the title on the map\naoi_map_bbox.get_root().html.add_child(folium.Element(title_html))\n\n# Visualize the map\naoi_map_bbox",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#summary",
    "href": "user_data_notebooks/eccodarwin-co2flux-monthgrid-v5_User_Notebook.html#summary",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully completed the following steps for the STAC collection for the NASA Air-Sea CO₂ Flux ECCO Darwin dataset: 1. Install and import the necessary libraries 2. Fetch the collection from STAC collections using the appropriate endpoints 3. Count the number of existing granules within the collection 4. Map and compare the CO₂ Flux levels over the Coastal California area for two distinctive months/years 5. Create a table that displays the minimum, maximum, and sum of the CO₂ Flux values for a specified region 6. Generate a time-series graph of the CO₂ Flux values for a specified region\nIf you have any questions regarding this user notebook, please contact us using the feedback form.",
    "crumbs": [
      "Data Usage Notebooks",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the OCO-2 MIP Top-Down CO₂ Budgets data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#approach",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#approach",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the OCO-2 MIP Top-Down CO₂ Budgets data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, we will visualize two tiles (side-by-side), allowing us to compare time points.\nAfter the visualization, we will perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#about-the-data",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "About the Data",
    "text": "About the Data\nThe Committee on Earth Observation Satellites (CEOS) Atmospheric Composition - Virtual Constellation (AC-VC) Greenhouse Gas (GHG) team has generated the CEOS CO₂ Budgets dataset, which provides annual top-down carbon dioxide (CO2) emissions and removals from 2015 - 2020 gridded globally at 1° resolution, and as national totals. Data is provided in units of grams of carbon dioxide per square meter per year (g CO2/m2/yr). Only a subset of the full dataset is displayed in the GHG Center explore view.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#installing-the-required-libraries",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#installing-the-required-libraries",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "Installing the required libraries",
    "text": "Installing the required libraries\nPlease run the cell below to install the libraries required to run this notebook.\n\n%pip install requests --quiet\n%pip install folium --quiet\n%pip install rasterstats --quiet\n%pip install pystac_client --quiet\n%pip install pandas --quiet\n%pip install matplotlib --quiet\n\nNote: you may need to restart the kernel to use updated packages.\nNote: you may need to restart the kernel to use updated packages.\nNote: you may need to restart the kernel to use updated packages.\nNote: you may need to restart the kernel to use updated packages.\nNote: you may need to restart the kernel to use updated packages.\nNote: you may need to restart the kernel to use updated packages.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#querying-the-stac-api",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# Please use the collection name similar to the one used in STAC collection.\n# Name of the collection for CEOS National Top-Down CO₂ Budgets dataset. \ncollection_name = \"oco2-mip-co2budget-yeargrid-v1\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\n#collection\n\nExamining the contents of our collection under the temporal variable, we see that the data is available from January 2015 to December 2020. By looking at the dashboard:time density, we observe that the periodic frequency of these observations is yearly.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 6 items\n\n\n\n# Examining the first item in the collection\n#items[0]\n\nBelow, we are entering the minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#exploring-changes-in-co₂-levels-using-the-raster-api",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#exploring-changes-in-co₂-levels-using-the-raster-api",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "Exploring Changes in CO₂ Levels Using the Raster API",
    "text": "Exploring Changes in CO₂ Levels Using the Raster API\nIn this notebook, we will explore the global changes of CO₂ budgets over time in urban regions. We will visualize the outputs on a map using folium.\n\n# to access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"start_datetime\"]: item for item in items} \nasset_name = \"ff\" #fossil fuel\n\n\n# Fetching the min and max values for a specific item\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n#Hardcoding the min and max values to match the scale in the GHG Center dashboard\nrescale_values = {\"max\": 450, \"min\": 0}\n\nNow, we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for 2020 and again for 2019, so that we can visualize each event independently.\n\ncolor_map = \"purd\"\nco2_flux_1 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[list(items.keys())[0]]['collection']}&item={items[list(items.keys())[0]]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\nco2_flux_1\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=oco2-mip-co2budget-yeargrid-v1&item=oco2-mip-co2budget-yeargrid-v1-2020&assets=ff&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0%2C450'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\nco2_flux_2 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[list(items.keys())[1]]['collection']}&item={items[list(items.keys())[1]]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\nco2_flux_2\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=oco2-mip-co2budget-yeargrid-v1&item=oco2-mip-co2budget-yeargrid-v1-2019&assets=ff&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0%2C450'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#visualizing-co₂-emissions",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#visualizing-co₂-emissions",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "Visualizing CO₂ Emissions",
    "text": "Visualizing CO₂ Emissions\n\n# We'll import folium to map and folium.plugins to allow mapping side-by-side\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for CO₂ Layer\n# Centre of map [latitude,longitude]\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n\nmap_layer_2020 = TileLayer(\n    tiles=co2_flux_1[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.5,\n)\nmap_layer_2020.add_to(map_.m1)\n\nmap_layer_2019 = TileLayer(\n    tiles=co2_flux_2[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.5,\n)\nmap_layer_2019.add_to(map_.m2)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the fossil fuel emission time series (January 2015 -December 2020) available for the Dallas, Texas area of the U.S. We can plot the data set using the code below:\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 10))\n\n\nplt.plot(\n    df[\"datetime\"],\n    df[\"max\"],\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"CO2 emissions\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"CO2 emissions gC/m2/year1\")\nplt.title(\"CO2 emission Values for Texas, Dallas (2015-2020)\")\n\nText(0.5, 1.0, 'CO2 emission Values for Texas, Dallas (2015-2020)')\n\n\n\n\n\n\n\n\n\n\nprint(items[2][\"properties\"][\"start_datetime\"])\n\n2018-01-01T00:00:00+00:00\n\n\n\nco2_flux_3 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\nco2_flux_3\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=oco2-mip-co2budget-yeargrid-v1&item=oco2-mip-co2budget-yeargrid-v1-2018&assets=ff&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0%2C450'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nimport folium\n\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=6.8,\n)\n\nmap_layer = TileLayer(\n    tiles=co2_flux_3[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.7\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\naoi_map_bbox\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#summary",
    "href": "user_data_notebooks/oco2-mip-co2budget-yeargrid-v1_User_Notebook.html#summary",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully explored, analyzed, and visualized the STAC collection for OCO-2 MIP Top-Down CO₂ Budgets.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for a given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Land-Atmosphere Carbon Flux data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, visualize two tiles (side-by-side), allowing time point comparison.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#approach",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#approach",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for a given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Land-Atmosphere Carbon Flux data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, visualize two tiles (side-by-side), allowing time point comparison.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#about-the-data",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "About the Data",
    "text": "About the Data\nThis dataset presents a variety of carbon flux parameters derived from the Carnegie-Ames-Stanford-Approach – Global Fire Emissions Database version 3 (CASA-GFED3) model. The model’s input data includes air temperature, precipitation, incident solar radiation, a soil classification map, and a number of satellite derived products. All model calculations are driven by analyzed meteorological data from NASA’s Modern-Era Retrospective analysis for Research and Application, Version 2 (MERRA-2). The resulting product provides monthly, global data at 0.5 degree resolution from January 2003 through December 2017. It includes the following carbon flux variables expressed in units of kilograms of carbon per square meter per month (kg Carbon m²/mon) from the following sources: net primary production (NPP), net ecosystem exchange (NEE), heterotrophic respiration (Rh), wildfire emissions (FIRE), and fuel wood burning emissions (FUEL). This product and earlier versions of MERRA-driven CASA-GFED carbon fluxes have been used in a number of atmospheric CO₂ transport studies, and through the support of NASA’s Carbon Monitoring System (CMS), it helps characterize, quantify, understand and predict the evolution of global carbon sources and sinks.",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#querying-the-stac-api",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\nPlease run the next cell to import the required libraries.\n\nimport requests\nimport folium\nimport folium.plugins\nfrom folium import Map, TileLayer \nfrom pystac_client import Client \nimport branca \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# Please use the collection name similar to the one used in the STAC collection.\n# Name of the collection for CASA GFED Land-Atmosphere Carbon Flux monthly emissions. \ncollection_name = \"casagfed-carbonflux-monthgrid-v3\"\n\n\n# Fetch the collection from STAC collections using the appropriate endpoint\n# the 'requests' library allows a HTTP request possible\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'casagfed-carbonflux-monthgrid-v3',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3'}],\n 'title': 'CASA GFED3 Land Carbon Flux',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'temporal': {'interval': [['2003-01-01T00:00:00+00:00',\n     '2017-12-31T00:00:00+00:00']]}},\n 'license': 'CC-BY-4.0',\n 'keywords': None,\n 'providers': None,\n 'summaries': {'datetime': ['2003-01-01T00:00:00Z', '2017-12-31T00:00:00Z']},\n 'description': 'This product provides Monthly average Net Primary Production (NPP), heterotrophic respiration (Rh), wildfire emissions (FIRE), and fuel wood burning emissions (FUEL) derived from the Carnegie-Ames-Stanford-Approach – Global Fire Emissions Database version 3 (CASA-GFED3) model.',\n 'item_assets': {'rh': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'rh',\n   'description': 'Heterotrophic respiration'},\n  'nee': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'nee',\n   'description': 'Net ecosystem exchange'},\n  'npp': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'NPP',\n   'description': 'Net Primary Production'},\n  'fire': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'fire',\n   'description': 'fire emissions'},\n  'fuel': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'fuel',\n   'description': 'fuel emissions'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month'}\n\n\nExamining the contents of our collection under the temporal variable, we see that the data is available from January 2003 to December 2017. By looking at the dashboard:time density, we observe that the periodic frequency of these observations is monthly.\n\n# Create a function that would search for the above data collection in the STAC API\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Apply the above function and check the total number of items available within the collection\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 180 items\n\n\n\n# Examine the first item in the collection\nitems[0]\n\n{'id': 'casagfed-carbonflux-monthgrid-v3-201712',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3/items/casagfed-carbonflux-monthgrid-v3-201712'}],\n 'assets': {'rh': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_Rh_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'rh',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'Heterotrophic respiration',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.6039900183677673,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [249101.0,\n       7375.0,\n       2429.0,\n       252.0,\n       32.0,\n       5.0,\n       2.0,\n       2.0,\n       0.0,\n       2.0]},\n     'statistics': {'mean': 0.006758838426321745,\n      'stddev': 0.022668374702334404,\n      'maximum': 0.6039900183677673,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'nee': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_NEE_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'nee',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'Net ecosystem exchange',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.48997998237609863,\n      'min': -0.11027999967336655,\n      'count': 11.0,\n      'buckets': [663.0,\n       234393.0,\n       23809.0,\n       282.0,\n       37.0,\n       10.0,\n       4.0,\n       0.0,\n       0.0,\n       2.0]},\n     'statistics': {'mean': 0.0015448036137968302,\n      'stddev': 0.00977976992726326,\n      'maximum': 0.48997998237609863,\n      'minimum': -0.11027999967336655,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'npp': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_NPP_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'NPP',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'Net Primary Production',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.23635999858379364,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [244636.0,\n       3051.0,\n       1928.0,\n       2634.0,\n       4088.0,\n       2211.0,\n       428.0,\n       156.0,\n       59.0,\n       9.0]},\n     'statistics': {'mean': 0.005214035045355558,\n      'stddev': 0.021809572353959084,\n      'maximum': 0.23635999858379364,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'fire': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_FIRE_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'fire',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'fire emissions',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.7556899785995483,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [258952.0, 161.0, 53.0, 22.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.00025634843041189015,\n      'stddev': 0.005492232274264097,\n      'maximum': 0.7556899785995483,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'fuel': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_FUEL_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'fuel',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'fuel emissions',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.020759999752044678,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [257568.0,\n       1150.0,\n       284.0,\n       115.0,\n       47.0,\n       21.0,\n       5.0,\n       6.0,\n       3.0,\n       1.0]},\n     'statistics': {'mean': 5.057307134848088e-05,\n      'stddev': 0.0003876804548781365,\n      'maximum': 0.020759999752044678,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [180, -90],\n    [180, 90],\n    [-180, 90],\n    [-180, -90]]]},\n 'collection': 'casagfed-carbonflux-monthgrid-v3',\n 'properties': {'end_datetime': '2017-12-31T00:00:00+00:00',\n  'start_datetime': '2017-12-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#exploring-changes-in-carbon-flux-levels-using-the-raster-api",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#exploring-changes-in-carbon-flux-levels-using-the-raster-api",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "Exploring Changes in Carbon Flux Levels Using the Raster API",
    "text": "Exploring Changes in Carbon Flux Levels Using the Raster API\nWe will explore changes in the land atmosphere Carbon flux Heterotrophic Respiration and examine their impacts over time. We’ll then visualize the outputs on a map using folium.\n\n# To access the year value from each item more easily, this will let us query more explicitly by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"start_datetime\"][:7]: item for item in items} \n# rh = Heterotrophic Respiration\nasset_name = \"rh\"\n\n{'id': 'casagfed-carbonflux-monthgrid-v3-201712',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/casagfed-carbonflux-monthgrid-v3/items/casagfed-carbonflux-monthgrid-v3-201712'}],\n 'assets': {'rh': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_Rh_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'rh',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'Heterotrophic respiration',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.6039900183677673,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [249101.0,\n       7375.0,\n       2429.0,\n       252.0,\n       32.0,\n       5.0,\n       2.0,\n       2.0,\n       0.0,\n       2.0]},\n     'statistics': {'mean': 0.006758838426321745,\n      'stddev': 0.022668374702334404,\n      'maximum': 0.6039900183677673,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'nee': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_NEE_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'nee',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'Net ecosystem exchange',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.48997998237609863,\n      'min': -0.11027999967336655,\n      'count': 11.0,\n      'buckets': [663.0,\n       234393.0,\n       23809.0,\n       282.0,\n       37.0,\n       10.0,\n       4.0,\n       0.0,\n       0.0,\n       2.0]},\n     'statistics': {'mean': 0.0015448036137968302,\n      'stddev': 0.00977976992726326,\n      'maximum': 0.48997998237609863,\n      'minimum': -0.11027999967336655,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'npp': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_NPP_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'NPP',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'Net Primary Production',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.23635999858379364,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [244636.0,\n       3051.0,\n       1928.0,\n       2634.0,\n       4088.0,\n       2211.0,\n       428.0,\n       156.0,\n       59.0,\n       9.0]},\n     'statistics': {'mean': 0.005214035045355558,\n      'stddev': 0.021809572353959084,\n      'maximum': 0.23635999858379364,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'fire': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_FIRE_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'fire',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'fire emissions',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.7556899785995483,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [258952.0, 161.0, 53.0, 22.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.00025634843041189015,\n      'stddev': 0.005492232274264097,\n      'maximum': 0.7556899785995483,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]},\n  'fuel': {'href': 's3://ghgc-data-store/casagfed-carbonflux-monthgrid-v3/GEOSCarb_CASAGFED3v3_FUEL_Flux_Monthly_x720_y360_201712.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'fuel',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'fuel emissions',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 0.020759999752044678,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [257568.0,\n       1150.0,\n       284.0,\n       115.0,\n       47.0,\n       21.0,\n       5.0,\n       6.0,\n       3.0,\n       1.0]},\n     'statistics': {'mean': 5.057307134848088e-05,\n      'stddev': 0.0003876804548781365,\n      'maximum': 0.020759999752044678,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [180, -90],\n    [180, 90],\n    [-180, 90],\n    [-180, -90]]]},\n 'collection': 'casagfed-carbonflux-monthgrid-v3',\n 'properties': {'end_datetime': '2017-12-31T00:00:00+00:00',\n  'start_datetime': '2017-12-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\nBelow, we are entering the minimum and maximum values to provide our upper and lower bounds in rescale_values.\n\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\nNow, we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for December 2003 and again for December 2017, so that we can visualize each event independently.\n\ncolor_map = \"purd\" # please refer to matplotlib library if you'd prefer choosing a different color ramp.\n# For more information on Colormaps in Matplotlib, please visit https://matplotlib.org/stable/users/explain/colors/colormaps.html\n\n# To change the year and month of the observed parameter, you can modify the \"items['YYYY-MM']\" statement\n# For example, you can change the current statement \"items['2003-12']\" to \"items['2016-10']\" \ndecember_2003_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2003-12']['collection']}&item={items['2003-12']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\ndecember_2003_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=casagfed-carbonflux-monthgrid-v3&item=casagfed-carbonflux-monthgrid-v3-200312&assets=rh&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0.0%2C0.6039900183677673'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\n# Now we apply the same process used in the previous step for the December 2017 tile\ndecember_2017_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2017-12']['collection']}&item={items['2017-12']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\ndecember_2017_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=casagfed-carbonflux-monthgrid-v3&item=casagfed-carbonflux-monthgrid-v3-201712&assets=rh&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0.0%2C0.6039900183677673'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#visualizing-land-atmosphere-carbon-flux-heterotrophic-respiration",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#visualizing-land-atmosphere-carbon-flux-heterotrophic-respiration",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "Visualizing Land-Atmosphere Carbon Flux (Heterotrophic Respiration)",
    "text": "Visualizing Land-Atmosphere Carbon Flux (Heterotrophic Respiration)\n\n# For this study we are going to compare the RH level in 2003 and 2017 over the State of Texas \n# To change the location, you can simply insert the latitude and longitude of the area of your interest in the \"location=(LAT, LONG)\" statement\n# For example, you can change the current statement \"location=(31.9, -99.9)\" to \"location=(34, -118)\" to monitor the RH level in California instead of Texas\n\n# Set initial zoom and center of map for CO₂ Layer\n# 'folium.plugins' allows mapping side-by-side\nmap_ = folium.plugins.DualMap(location=(31.9, -99.9), zoom_start=6)\n\n# The TileLayer library helps in manipulating and displaying raster layers on a map\n# December 2003\nmap_layer_2003 = TileLayer(\n    tiles=december_2003_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.8,\n    name=\"December 2003 RH Level\",\n    overlay= True,\n    legendEnabled = True\n)\nmap_layer_2003.add_to(map_.m1)\n\n\n# December 2017\nmap_layer_2017 = TileLayer(\n    tiles=december_2017_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.8,\n    name=\"December 2017 RH Level\",\n    overlay= True,\n    legendEnabled = True\n)\nmap_layer_2017.add_to(map_.m2)\n\n\n# Display data markers (titles) on both maps\nfolium.Marker((40, 5.0), tooltip=\"both\").add_to(map_)\nfolium.LayerControl(collapsed=False).add_to(map_)\n\n\n# Add a legend to the dual map using the 'branca' library. \n# Note: the inserted legend is representing the minimum and maximum values for both tiles.\ncolormap = branca.colormap.linear.PuRd_09.scale(0, 0.3) # minimum value = 0, maximum value = 0.3 (kg Carbon/m2/month)\ncolormap = colormap.to_step(index=[0, 0.07, 0.15, 0.22, 0.3])\ncolormap.caption = 'Rh Values (kg Carbon/m2/month)'\n\ncolormap.add_to(map_.m1)\n\n\n# Visualizing the map\nmap_\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the Heterotrophic Respiration time series (January 2003 -December 2017) available for the Dallas, Texas area. We can plot the data set using the code below:\n\nfig = plt.figure(figsize=(20, 10)) #determine the width and height of the plot using the 'matplotlib' library\n\nplt.plot(\n    df[\"date\"],\n    df[\"max\"],\n    color=\"purple\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"Max monthly Carbon emissions\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"kg Carbon/m2/month\")\nplt.title(\"Heterotrophic Respiration Values for Dallas, Texas (2003-2017)\")\n\nText(0.5, 1.0, 'Heterotrophic Respiration Values for Dallas, Texas (2003-2017)')\n\n\n\n\n\n\n\n\n\n\n# Now let's examine the Rh level for the 3rd item in the collection for Dallas, Texas area\n# Keep in mind that a list starts from 0, 1, 2,... therefore items[2] is referring to the third item in the list/collection\nprint(items[2][\"properties\"][\"start_datetime\"]) #print the start Date Time of the third granule in the collection!\n\n2017-10-01T00:00:00+00:00\n\n\n\n# Fetch the third granule in the collection and set the color scheme and rescale values. \noctober_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\noctober_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=casagfed-carbonflux-monthgrid-v3&item=casagfed-carbonflux-monthgrid-v3-201710&assets=rh&color_formula=gamma+r+1.05&colormap_name=purd&rescale=0.0%2C0.6039900183677673'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\n# Map the Rh level for the Dallas, Texas area for the October, 2017 timeframe\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        32.8, # latitude\n        -96.79, # longitude\n    ],\n    zoom_start=9,\n)\n\nmap_layer = TileLayer(\n    tiles=october_tile[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.7, name=\"October 2017 RH Level\", overlay= True, legendEnabled = True\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\n# Display data marker (title) on the map\nfolium.Marker((40, 5.9), tooltip=\"both\").add_to(aoi_map_bbox)\nfolium.LayerControl(collapsed=False).add_to(aoi_map_bbox)\n\n# Add a legend\ncolormap = branca.colormap.linear.PuRd_09.scale(0, 0.3) # minimum value = 0, maximum value = 0.3 (kg Carbon/m2/month)\ncolormap = colormap.to_step(index=[0, 0.07, 0.15, 0.22, 0.3])\ncolormap.caption = 'Rh Values (kg Carbon/m2/month)'\n\ncolormap.add_to(aoi_map_bbox)\n\naoi_map_bbox\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#summary",
    "href": "user_data_notebooks/casagfed-carbonflux-monthgrid-v3_User_Notebook.html#summary",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully completed the following steps for the STAC collection for CASA GFED Land-Atmosphere Carbon Flux data: 1. Install and import the necessary libraries 2. Fetch the collection from STAC collections using the appropriate endpoints 3. Count the number of existing granules within the collection 4. Map and compare the Heterotrophic Respiration (Rh) levels over the Dallas, Texas area for two distinctive years 5. Create a table that displays the minimum, maximum, and sum of the Rh values for a specified region 6. Generate a time-series graph of the Rh values for a specified region\nIf you have any questions regarding this user notebook, please contact us using the feedback form.",
    "crumbs": [
      "Data Usage Notebooks",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Wetland Methane Emissions, LPJ-wsl Model data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, visualize two tiles (side-by-side), allowing time point comparison.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#approach",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#approach",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the Wetland Methane Emissions, LPJ-wsl Model data product.\nPass the STAC item into the raster API /stac/tilejson.jsonendpoint.\nUsing folium.plugins.DualMap, visualize two tiles (side-by-side), allowing time point comparison.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#about-the-data",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "About the Data",
    "text": "About the Data\nMethane (CH₄) emissions from wetlands are estimated to be the largest natural source of methane in the global CH₄ budget, contributing to roughly one third of the total of natural and anthropogenic emissions. Wetland CH₄ is produced by microbes breaking down organic matter in the oxygen deprived environment of inundated soils. Due to limited data availability, the details of the role of wetland CH₄ emissions has thus far been underrepresented. Using the Wald Schnee und Landschaft version (LPJ-wsl) of the Lund-Potsdam-Jena Dynamic Global Vegetation Model (LPJ-DGVM) global CH₄ emissions from wetlands are estimated at 0.5 x 0.5 degree resolution by simulating wetland extent and using characteristics of these inundated areas, such as soil moisture, temperature, and carbon content, to estimate CH₄ quantities emitted into the atmosphere. Highlighted areas displayed in this dataset show concentrated methane sources from tropical and high latitude ecosystems. The LPJ-wsl Wetland Methane Emissions data product presented here consists of global daily and monthly model estimates of terrestrial wetland CH₄ emissions from 1980 - 2021. These data are regularly used in conjunction with NASA’s Goddard Earth Observing System (GEOS) model to simulate the impact of wetlands and other methane sources on atmospheric methane concentrations, to compare against satellite and airborne data, and to improve understanding and prediction of wetland emissions.",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#querying-the-stac-api",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# Please use the collection name similar to the one used in STAC collection.\n\n# Name of the collection for wetland methane monthly emissions. \ncollection_name = \"lpjwsl-wetlandch4-monthgrid-v1\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'lpjwsl-wetlandch4-monthgrid-v1',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/lpjwsl-wetlandch4-monthgrid-v1/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/lpjwsl-wetlandch4-monthgrid-v1'}],\n 'title': 'Wetland Methane Emissions, LPJ-wsl Model (Monthly)',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'temporal': {'interval': [['1980-01-01T00:00:00+00:00',\n     '2021-12-01T00:00:00+00:00']]}},\n 'license': 'CC-BY-4.0',\n 'keywords': None,\n 'providers': None,\n 'summaries': {'datetime': ['1980-01-01T00:00:00Z', '2021-12-01T00:00:00Z']},\n 'description': 'Wetland methane emissions produced by the Lund–Potsdam–Jena Dynamic Global Vegetation Model (LPJ-DGVM) Wald Schnee und Landscaft version (LPJ-wsl). LPJ-wsl is a prognostic model used to simulate future changes in wetland emissions and independently verified with remote sensing data products. The LPJ-wsl model is regularly used in conjunction with NASA’s GEOS model to simulate the impact of wetlands and other methane sources on atmospheric methane concentrations.',\n 'item_assets': {'ch4-wetlands-emissions': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'CH4 Wetland Emissions',\n   'description': 'Methane emissions from wetlands.'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month'}\n\n\nExamining the contents of our collection under summaries, we see that the data is available from January 1980 to December 2021. By looking at dashboard: time density, we can see that these observations are collected monthly.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 504 items\n\n\n\n# Examining the first item in the collection\nitems[0]\n\n{'id': 'lpjwsl-wetlandch4-monthgrid-v1-202112',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/lpjwsl-wetlandch4-monthgrid-v1'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/lpjwsl-wetlandch4-monthgrid-v1'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/lpjwsl-wetlandch4-monthgrid-v1/items/lpjwsl-wetlandch4-monthgrid-v1-202112'}],\n 'assets': {'ch4-wetlands-emissions': {'href': 's3://ghgc-data-store/lpjwsl-wetlandch4-monthgrid-v1/NASA_GSFC_ch4_wl_ch4_wetlands_v22_x720_y360_t12_202112.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'CH4 Wetland Emissions',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [360.0, 720.0],\n   'description': 'Methane emissions from wetlands.',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 6.929981708526611,\n      'min': 0.0,\n      'count': 11.0,\n      'buckets': [258080.0,\n       575.0,\n       251.0,\n       124.0,\n       78.0,\n       41.0,\n       26.0,\n       16.0,\n       7.0,\n       2.0]},\n     'statistics': {'mean': 0.012271502055227757,\n      'stddev': 0.1378920078277588,\n      'maximum': 6.929981708526611,\n      'minimum': 0.0,\n      'valid_percent': 0.0003858024691358025}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.5, 0.0, -180.0, 0.0, -0.5, 90.0, 0.0, 0.0, 1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [180, -90],\n    [180, 90],\n    [-180, 90],\n    [-180, -90]]]},\n 'collection': 'lpjwsl-wetlandch4-monthgrid-v1',\n 'properties': {'datetime': '2021-12-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\nBelow, we enter minimum and maximum values to provide our upper and lower bounds in rescale_values.\n\nrescale_values = {'max': 0.2, 'min': 0.0}",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#exploring-changes-in-methane-ch4-emission-levels-using-the-raster-api",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#exploring-changes-in-methane-ch4-emission-levels-using-the-raster-api",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "Exploring Changes in Methane (CH4) Emission Levels Using the Raster API",
    "text": "Exploring Changes in Methane (CH4) Emission Levels Using the Raster API\nIn this notebook, we will explore the temporal impacts of methane emissions. We will visualize the outputs on a map using folium.\n\n# To access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"datetime\"][:7]: item for item in items} \n\nNow, we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for December 2001 and again for December 2021, so we can visualize each event independently.\n\ncolor_map = \"magma\" # select the color ramp from matplotlib library.\ndecember_2001_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2001-12']['collection']}&item={items['2001-12']['id']}\"\n    \"&assets=ch4-wetlands-emissions\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\ndecember_2001_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=lpjwsl-wetlandch4-monthgrid-v1&item=lpjwsl-wetlandch4-monthgrid-v1-200112&assets=ch4-wetlands-emissions&color_formula=gamma+r+1.05&colormap_name=magma&rescale=0.0%2C0.2'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\ndecember_2021_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2021-12']['collection']}&item={items['2021-12']['id']}\"\n    \"&assets=ch4-wetlands-emissions\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\ndecember_2021_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=lpjwsl-wetlandch4-monthgrid-v1&item=lpjwsl-wetlandch4-monthgrid-v1-202112&assets=ch4-wetlands-emissions&color_formula=gamma+r+1.05&colormap_name=magma&rescale=0.0%2C0.2'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#visualizing-ch₄-emissions",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#visualizing-ch₄-emissions",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "Visualizing CH₄ Emissions",
    "text": "Visualizing CH₄ Emissions\n\n# We will import folium to map and folium.plugins to allow side-by-side mapping\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for CH₄ Layer\n# Centre of map [latitude,longitude]\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n# December 2001\nmap_layer_2001 = TileLayer(\n    tiles=december_2001_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.5,\n)\nmap_layer_2001.add_to(map_.m1)\n\n# December 2021\nmap_layer_2021 = TileLayer(\n    tiles=december_2021_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.5,\n)\nmap_layer_2021.add_to(map_.m2)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the wetland methane emissions time series (January 1980 – December 2021) available for the Dallas, Texas area of the U.S. We can plot the data set using the code below:\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 10))\n\n\nplt.plot(\n    df[\"date\"],\n    df[\"max\"],\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"Max monthly CH₄ emissions\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"CH4 emissions g/m2\")\nplt.title(\"CH4 emission Values for Texas, Dallas (1980-2021)\")\n\nText(0.5, 1.0, 'CH4 emission Values for Texas, Dallas (1980-2021)')\n\n\n\n\n\n\n\n\n\n\nprint(items[2][\"properties\"][\"datetime\"])\n\n2021-10-01T00:00:00+00:00\n\n\n\noctober_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    \"&assets=ch4-wetlands-emissions\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\noctober_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=lpjwsl-wetlandch4-monthgrid-v1&item=lpjwsl-wetlandch4-monthgrid-v1-202110&assets=ch4-wetlands-emissions&color_formula=gamma+r+1.05&colormap_name=magma&rescale=0.0%2C0.2'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nimport folium\n\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=8,\n)\n\nmap_layer = TileLayer(\n    tiles=october_tile[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.5\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\naoi_map_bbox\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#summary",
    "href": "user_data_notebooks/lpjwsl-wetlandch4-grid-v1_User_Notebook.html#summary",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "Summary",
    "text": "Summary\nIn this notebook, we have successfully explored, analyzed, and visualized the STAC collection for wetland methane emissions.",
    "crumbs": [
      "Data Usage Notebooks",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. Collection processed in this notebook is ODIAC CO₂ emissions version 2022.\nPass the STAC item into raster API /stac/tilejson.json endpoint\nWe’ll visualize two tiles (side-by-side) allowing for comparison of each of the time points using folium.plugins.DualMap\nAfter the visualization, we’ll perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#approach",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#approach",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. Collection processed in this notebook is ODIAC CO₂ emissions version 2022.\nPass the STAC item into raster API /stac/tilejson.json endpoint\nWe’ll visualize two tiles (side-by-side) allowing for comparison of each of the time points using folium.plugins.DualMap\nAfter the visualization, we’ll perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#about-the-data",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "About the Data",
    "text": "About the Data\nThe Open-Data Inventory for Anthropogenic Carbon dioxide (ODIAC) is a high-spatial resolution global emission data product of CO₂ emissions from fossil fuel combustion (Oda and Maksyutov, 2011). ODIAC pioneered the combined use of space-based nighttime light data and individual power plant emission/location profiles to estimate the global spatial extent of fossil fuel CO₂ emissions. With the innovative emission modeling approach, ODIAC achieved the fine picture of global fossil fuel CO₂ emissions at a 1x1km.",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#querying-the-stac-api",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\nimport requests\nfrom folium import Map, TileLayer\nfrom pystac_client import Client\n\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n#Please use the collection name similar to the one used in STAC collection.\n# Name of the collection for ODIAC dataset. \ncollection_name = \"odiac-ffco2-monthgrid-v2022\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'odiac-ffco2-monthgrid-v2022',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022'}],\n 'title': 'ODIAC Fossil Fuel CO₂ Emissions',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-180, -90, 180, 90]]},\n  'temporal': {'interval': [['2000-01-01T00:00:00+00:00',\n     '2021-12-31T00:00:00+00:00']]}},\n 'license': 'CC-BY-4.0',\n 'keywords': None,\n 'providers': [{'url': 'https://www.nies.go.jp',\n   'name': 'National Institute for Environmental Studies',\n   'roles': ['producer', 'licensor'],\n   'description': None}],\n 'summaries': {'datetime': ['2000-01-01T00:00:00Z', '2021-12-31T00:00:00Z']},\n 'description': 'The Open-Data Inventory for Anthropogenic Carbon dioxide (ODIAC) is a high-spatial resolution global emission data product of CO₂ emissions from fossil fuel combustion (Oda and Maksyutov, 2011). ODIAC pioneered the combined use of space-based nighttime light data and individual power plant emission/location profiles to estimate the global spatial extent of fossil fuel CO₂ emissions. With the innovative emission modeling approach, ODIAC achieved the fine picture of global fossil fuel CO₂ emissions at a 1x1km.',\n 'item_assets': {'co2-emissions': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Fossil Fuel CO₂ Emissions',\n   'description': 'CO₂ emissions from fossil fuel combustion, cement production and gas flaring.'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': True,\n 'dashboard:time_density': 'month'}\n\n\nExamining the contents of our collection under summaries we see that the data is available from January 2000 to December 2021. By looking at the dashboard:time density we observe that the periodic frequency of these observations is monthly.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 264 items\n\n\n\nitems[0]\n\n{'id': 'odiac-ffco2-monthgrid-v2022-202112',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022/items/odiac-ffco2-monthgrid-v2022-202112'}],\n 'assets': {'co2-emissions': {'href': 's3://ghgc-data-store/odiac-ffco2-monthgrid-v2022/odiac2022_1km_excl_intl_202112.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Fossil Fuel CO₂ Emissions',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [21600.0, 43200.0],\n   'description': 'CO₂ emissions from fossil fuel combustion, cement production and gas flaring.',\n   'raster:bands': [{'scale': 1.0,\n     'nodata': -9999.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 2497.01904296875,\n      'min': -138.71914672851562,\n      'count': 11.0,\n      'buckets': [523457.0, 691.0, 95.0, 28.0, 11.0, 2.0, 2.0, 1.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.9804128408432007,\n      'stddev': 14.766693454324674,\n      'maximum': 2497.01904296875,\n      'minimum': -138.71914672851562,\n      'valid_percent': 100.0}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.008333333333333333,\n    0.0,\n    -180.0,\n    0.0,\n    -0.008333333333333333,\n    90.0,\n    0.0,\n    0.0,\n    1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [180, -90],\n    [180, 90],\n    [-180, 90],\n    [-180, -90]]]},\n 'collection': 'odiac-ffco2-monthgrid-v2022',\n 'properties': {'end_datetime': '2021-12-31T00:00:00+00:00',\n  'start_datetime': '2021-12-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\nThis makes sense as there are 22 years between 2000 - 2021, with 12 months per year, meaning 264 records in total.\nBelow, we are entering the minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#exploring-changes-in-carbon-dioxide-co₂-levels-using-the-raster-api",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#exploring-changes-in-carbon-dioxide-co₂-levels-using-the-raster-api",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "Exploring Changes in Carbon Dioxide (CO₂) levels using the Raster API",
    "text": "Exploring Changes in Carbon Dioxide (CO₂) levels using the Raster API\nWe will explore changes in fossil fuel emissions in urban egions. In this notebook, we’ll explore the impacts of these emissions and explore these changes over time. We’ll then visualize the outputs on a map using folium.\n\n# to access the year value from each item more easily, this will let us query more explicity by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"start_datetime\"][:7]: item for item in items} \nasset_name = \"co2-emissions\"\n\n\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\nNow we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for January 2020 and again for January 2000, so that we can visualize each event independently.\n\ncolor_map = \"rainbow\" # please select the color ramp from matplotlib library.\njanuary_2020_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2020-01']['collection']}&item={items['2020-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\njanuary_2020_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=odiac-ffco2-monthgrid-v2022&item=odiac-ffco2-monthgrid-v2022-202001&assets=co2-emissions&color_formula=gamma+r+1.05&colormap_name=rainbow&rescale=-138.71914672851562%2C2497.01904296875'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\njanuary_2000_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items['2000-01']['collection']}&item={items['2000-01']['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\njanuary_2000_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=odiac-ffco2-monthgrid-v2022&item=odiac-ffco2-monthgrid-v2022-200001&assets=co2-emissions&color_formula=gamma+r+1.05&colormap_name=rainbow&rescale=-138.71914672851562%2C2497.01904296875'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#visualizing-co₂-emissions",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#visualizing-co₂-emissions",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "Visualizing CO₂ emissions",
    "text": "Visualizing CO₂ emissions\n\n# We'll import folium to map and folium.plugins to allow mapping side-by-side\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for CO₂ Layer\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n# December 2001\nmap_layer_2020 = TileLayer(\n    tiles=january_2020_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.8,\n)\nmap_layer_2020.add_to(map_.m1)\n\n# December 2021\nmap_layer_2000 = TileLayer(\n    tiles=january_2000_tile[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.8,\n)\nmap_layer_2000.add_to(map_.m2)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#section",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#section",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "",
    "text": "# Texas, USA\ntexas_aoi = {\n    \"type\": \"Feature\",\n    \"properties\": {},\n    \"geometry\": {\n        \"coordinates\": [\n            [\n                # [13.686159004559698, -21.700046934333145],\n                # [13.686159004559698, -23.241974326585833],\n                # [14.753560168039911, -23.241974326585833],\n                # [14.753560168039911, -21.700046934333145],\n                # [13.686159004559698, -21.700046934333145],\n                [-95, 29],\n                [-95, 33],\n                [-104, 33],\n                [-104,29],\n                [-95, 29]\n            ]\n        ],\n        \"type\": \"Polygon\",\n    },\n}\n\n\n# We'll plug in the coordinates for a location\n# central to the study area and a reasonable zoom level\n\nimport folium\n\naoi_map = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=6,\n)\n\nfolium.GeoJson(texas_aoi, name=\"Texas, USA\").add_to(aoi_map)\naoi_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Check total number of items available\nitems = requests.get(\n    f\"{STAC_API_URL}/collections/{collection_name}/items?limit=300\"\n).json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 264 items\n\n\n\n# Explore one item to see what it contains\nitems[0]\n\n{'id': 'odiac-ffco2-monthgrid-v2022-202112',\n 'bbox': [-180.0, -90.0, 180.0, 90.0],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/odiac-ffco2-monthgrid-v2022/items/odiac-ffco2-monthgrid-v2022-202112'}],\n 'assets': {'co2-emissions': {'href': 's3://ghgc-data-store/odiac-ffco2-monthgrid-v2022/odiac2022_1km_excl_intl_202112.tif',\n   'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Fossil Fuel CO₂ Emissions',\n   'proj:bbox': [-180.0, -90.0, 180.0, 90.0],\n   'proj:epsg': 4326.0,\n   'proj:shape': [21600.0, 43200.0],\n   'description': 'CO₂ emissions from fossil fuel combustion, cement production and gas flaring.',\n   'raster:bands': [{'scale': 1.0,\n     'nodata': -9999.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float32',\n     'histogram': {'max': 2497.01904296875,\n      'min': -138.71914672851562,\n      'count': 11.0,\n      'buckets': [523457.0, 691.0, 95.0, 28.0, 11.0, 2.0, 2.0, 1.0, 0.0, 1.0]},\n     'statistics': {'mean': 0.9804128408432007,\n      'stddev': 14.766693454324674,\n      'maximum': 2497.01904296875,\n      'minimum': -138.71914672851562,\n      'valid_percent': 100.0}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.0, -90.0],\n      [180.0, -90.0],\n      [180.0, 90.0],\n      [-180.0, 90.0],\n      [-180.0, -90.0]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.008333333333333333,\n    0.0,\n    -180.0,\n    0.0,\n    -0.008333333333333333,\n    90.0,\n    0.0,\n    0.0,\n    1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180, -90],\n    [180, -90],\n    [180, 90],\n    [-180, 90],\n    [-180, -90]]]},\n 'collection': 'odiac-ffco2-monthgrid-v2022',\n 'properties': {'end_datetime': '2021-12-31T00:00:00+00:00',\n  'start_datetime': '2021-12-01T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': []}\n\n\n\n# the bounding box should be passed to the geojson param as a geojson Feature or FeatureCollection\ndef generate_stats(item, geojson):\n    result = requests.post(\n        f\"{RASTER_API_URL}/cog/statistics\",\n        params={\"url\": item[\"assets\"][asset_name][\"href\"]},\n        json=geojson,\n    ).json()\n    return {\n        **result[\"properties\"],\n        \"start_datetime\": item[\"properties\"][\"start_datetime\"][:7],\n    }\n\nWith the function above we can generate the statistics for the AOI.\n\n%%time\nstats = [generate_stats(item, texas_aoi) for item in items]\n\nCPU times: user 6.98 s, sys: 866 ms, total: 7.85 s\nWall time: 5min 49s\n\n\n\nstats[0]\n\n{'statistics': {'b1': {'min': 0.0,\n   'max': 404594.21875,\n   'mean': 12.983534915123457,\n   'count': 518400.0,\n   'sum': 6730664.5,\n   'std': 1073.4786364468523,\n   'median': 0.0,\n   'majority': 0.0,\n   'minority': 0.7153176665306091,\n   'unique': 160223.0,\n   'histogram': [[518384.0, 9.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n    [0.0,\n     40459.421875,\n     80918.84375,\n     121378.265625,\n     161837.6875,\n     202297.109375,\n     242756.53125,\n     283215.9375,\n     323675.375,\n     364134.8125,\n     404594.21875]],\n   'valid_percent': 100.0,\n   'masked_pixels': 0.0,\n   'valid_pixels': 518400.0,\n   'percentile_2': 0.0,\n   'percentile_98': 120.91593933105469}},\n 'start_datetime': '2021-12'}\n\n\n\nimport pandas as pd\n\n\ndef clean_stats(stats_json) -&gt; pd.DataFrame:\n    df = pd.json_normalize(stats_json)\n    df.columns = [col.replace(\"statistics.b1.\", \"\") for col in df.columns]\n    df[\"date\"] = pd.to_datetime(df[\"start_datetime\"])\n    return df\n\n\ndf = clean_stats(stats)\ndf.head(5)\n\n\n\n\n\n\n\n\n\nstart_datetime\nmin\nmax\nmean\ncount\nsum\nstd\nmedian\nmajority\nminority\nunique\nhistogram\nvalid_percent\nmasked_pixels\nvalid_pixels\npercentile_2\npercentile_98\ndate\n\n\n\n\n0\n2021-12\n0.0\n404594.21875\n12.983535\n518400.0\n6730664.5\n1073.478636\n0.0\n0.0\n0.715318\n160223.0\n[[518384.0, 9.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0,...\n100.0\n0.0\n518400.0\n0.0\n120.915939\n2021-12-01\n\n\n1\n2021-11\n0.0\n379500.71875\n12.181822\n518400.0\n6315056.5\n1006.900541\n0.0\n0.0\n0.671284\n160209.0\n[[518384.0, 9.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0,...\n100.0\n0.0\n518400.0\n0.0\n113.472582\n2021-11-01\n\n\n2\n2021-10\n0.0\n365564.12500\n11.742121\n518400.0\n6087115.5\n969.924733\n0.0\n0.0\n0.647386\n160210.0\n[[518384.0, 9.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0,...\n100.0\n0.0\n518400.0\n0.0\n109.432922\n2021-10-01\n\n\n3\n2021-09\n0.0\n369532.53125\n11.863683\n518400.0\n6150133.5\n980.453000\n0.0\n0.0\n0.653934\n160213.0\n[[518384.0, 9.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0,...\n100.0\n0.0\n518400.0\n0.0\n110.523390\n2021-09-01\n\n\n4\n2021-08\n0.0\n412252.34375\n13.224326\n518400.0\n6855490.5\n1093.796870\n0.0\n0.0\n0.728647\n160224.0\n[[518384.0, 9.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0,...\n100.0\n0.0\n518400.0\n0.0\n123.059172\n2021-08-01",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the ODIAC fossil fuel emission time series available (January 2000 -December 2021) for the Texas, Dallas area of USA. We can plot the data set using the code below:\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 10))\n\n\nplt.plot(\n    df[\"date\"],\n    df[\"max\"],\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"Max monthly CO₂ emissions\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"CO2 emissions gC/m2/d\")\nplt.title(\"CO2 emission Values for Texas, Dallas (2000-2021)\")\n\nText(0.5, 1.0, 'CO2 emission Values for Texas, Dallas (2000-2021)')\n\n\n\n\n\n\n\n\n\n\nprint(items[2][\"properties\"][\"start_datetime\"])\n\n2021-10-01T00:00:00+00:00\n\n\n\noctober_tile = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\noctober_tile\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=odiac-ffco2-monthgrid-v2022&item=odiac-ffco2-monthgrid-v2022-202110&assets=co2-emissions&color_formula=gamma+r+1.05&colormap_name=rainbow&rescale=-138.71914672851562%2C2497.01904296875'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.0, -90.0, 180.0, 90.0],\n 'center': [0.0, 0.0, 0]}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nimport folium\n\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=8,\n)\n\nmap_layer = TileLayer(\n    tiles=october_tile[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.5\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\naoi_map_bbox\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#summary",
    "href": "user_data_notebooks/odiac-ffco2-monthgrid-v2022_User_Notebook.html#summary",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "Summary",
    "text": "Summary\nIn this notebook we have successfully explored, analysed and visualized STAC collecetion for ODIAC C02 fossisl fuel emission (2022).",
    "crumbs": [
      "Data Usage Notebooks",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the OCO-2 GEOS Column CO₂ Concentrations data product.\nPass the STAC item into the raster API /stac/tilejson.json endpoint.\nUsing folium.plugins.DualMap, visualize two tiles (side-by-side), allowing time point comparison.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#approach",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#approach",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "",
    "text": "Identify available dates and temporal frequency of observations for the given collection using the GHGC API /stac endpoint. The collection processed in this notebook is the OCO-2 GEOS Column CO₂ Concentrations data product.\nPass the STAC item into the raster API /stac/tilejson.json endpoint.\nUsing folium.plugins.DualMap, visualize two tiles (side-by-side), allowing time point comparison.\nAfter the visualization, perform zonal statistics for a given polygon.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#about-the-data",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#about-the-data",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "About the Data",
    "text": "About the Data\nIn July 2014, NASA successfully launched the first dedicated Earth remote sensing satellite to study atmospheric carbon dioxide (CO₂) from space. The Orbiting Carbon Observatory-2 (OCO-2) is an exploratory science mission designed to collect space-based global measurements of atmospheric CO₂ with the precision, resolution, and coverage needed to characterize sources and sinks (fluxes) on regional scales (≥1000 km). This dataset provides global gridded, daily column-averaged carbon dioxide (XCO₂) concentrations from January 1, 2015 - February 28, 2022. The data are derived from OCO-2 observations that were input to the Goddard Earth Observing System (GEOS) Constituent Data Assimilation System (CoDAS), a modeling and data assimilation system maintained by NASA’s Global Modeling and Assimilation Office (GMAO). Concentrations are measured in moles of carbon dioxide per mole of dry air (mol CO₂/mol dry) at a spatial resolution of 0.5° x 0.625°. Data assimilation synthesizes simulations and observations, adjusting modeled atmospheric constituents like CO₂ to reflect observed values. With the support of NASA’s Carbon Monitoring System (CMS) Program and the OCO Science Team, this dataset was produced as part of the OCO-2 mission which provides the highest quality space-based XCO₂ retrievals to date.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#querying-the-stac-api",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#querying-the-stac-api",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "Querying the STAC API",
    "text": "Querying the STAC API\n\n# Provide STAC and RASTER API endpoints\nSTAC_API_URL = \"http://ghg.center/api/stac\"\nRASTER_API_URL = \"https://ghg.center/api/raster\"\n\n# Please use the collection name similar to the one used in STAC collection.\n# Name of the collection for OCO-2 GEOS Column CO₂ Concentrations. \ncollection_name = \"oco2geos-co2-daygrid-v10r\"\n\n\n# Fetching the collection from STAC collections using appropriate endpoint.\ncollection = requests.get(f\"{STAC_API_URL}/collections/{collection_name}\").json()\ncollection\n\n{'id': 'oco2geos-co2-daygrid-v10r',\n 'type': 'Collection',\n 'links': [{'rel': 'items',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/oco2geos-co2-daygrid-v10r/items'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/oco2geos-co2-daygrid-v10r'}],\n 'title': 'OCO-2 GEOS Assimilated CO2 Concentrations',\n 'assets': None,\n 'extent': {'spatial': {'bbox': [[-180.3125, -90.25, 179.6875, 90.25]]},\n  'temporal': {'interval': [['2015-01-01T00:00:00+00:00',\n     '2022-02-28T00:00:00+00:00']]}},\n 'license': 'CC-BY-4.0',\n 'keywords': None,\n 'providers': None,\n 'summaries': {'datetime': ['2015-01-01T00:00:00Z', '2022-02-28T00:00:00Z']},\n 'description': 'Daily, global 0.5 x 0.625 degree assimilated CO2 concentrations derived from OCO-2 satellite data, version 10r',\n 'item_assets': {'xco2': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Average Dry-Air Column CO2',\n   'description': 'Daily dry air column-averaged mole fractions of carbon dioxide created from data assimilations of OCO-2 satellite retrievals.'},\n  'xco2prec': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n   'roles': ['data', 'layer'],\n   'title': 'Average Dry-Air Column CO2 Precision (XCO2PREC)',\n   'description': 'Random errors for daily dry air column-averaged mole fractions of carbon dioxide calculated using a posteriori diagnostics'}},\n 'stac_version': '1.0.0',\n 'stac_extensions': None,\n 'dashboard:is_periodic': True,\n 'dashboard:time_density': 'day'}\n\n\nExamining the contents of our collection under the temporal variable, we see that the data is available from January 2015 to February 2022. By looking at the dashboard:time density, we can see that these observations are collected daily.\n\ndef get_item_count(collection_id):\n    count = 0\n    items_url = f\"{STAC_API_URL}/collections/{collection_id}/items\"\n\n    while True:\n        response = requests.get(items_url)\n\n        if not response.ok:\n            print(\"error getting items\")\n            exit()\n\n        stac = response.json()\n        count += int(stac[\"context\"].get(\"returned\", 0))\n        next = [link for link in stac[\"links\"] if link[\"rel\"] == \"next\"]\n\n        if not next:\n            break\n        items_url = next[0][\"href\"]\n\n    return count\n\n\n# Check total number of items available\nnumber_of_items = get_item_count(collection_name)\nitems = requests.get(f\"{STAC_API_URL}/collections/{collection_name}/items?limit={number_of_items}\").json()[\"features\"]\nprint(f\"Found {len(items)} items\")\n\nFound 2615 items\n\n\n\n# Examining the first item in the collection\nitems[0]\n\n{'id': 'oco2geos-co2-daygrid-v10r-20220228',\n 'bbox': [-180.3125, -90.25, 179.6875, 90.25],\n 'type': 'Feature',\n 'links': [{'rel': 'collection',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/oco2geos-co2-daygrid-v10r'},\n  {'rel': 'parent',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/collections/oco2geos-co2-daygrid-v10r'},\n  {'rel': 'root',\n   'type': 'application/json',\n   'href': 'https://ghg.center/api/stac/'},\n  {'rel': 'self',\n   'type': 'application/geo+json',\n   'href': 'https://ghg.center/api/stac/collections/oco2geos-co2-daygrid-v10r/items/oco2geos-co2-daygrid-v10r-20220228'}],\n 'assets': {'xco2': {'href': 's3://ghgc-data-store/oco2geos-co2-daygrid-v10r/oco2_GEOS_XCO2_L3CO2_day_B10206Ar_20220228.tif',\n   'type': 'image/tiff; application=geotiff',\n   'roles': ['data', 'layer'],\n   'title': 'Average Dry-Air Column CO2',\n   'proj:bbox': [-180.3125, -90.25, 179.6875, 90.25],\n   'proj:epsg': 4326.0,\n   'proj:shape': [361.0, 576.0],\n   'description': 'Daily dry air column-averaged mole fractions of carbon dioxide created from data assimilations of OCO-2 satellite retrievals.',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float64',\n     'histogram': {'max': 423.60419320175424,\n      'min': 411.7429234611336,\n      'count': 11.0,\n      'buckets': [37851.0,\n       30550.0,\n       19173.0,\n       11220.0,\n       15304.0,\n       31151.0,\n       45205.0,\n       15819.0,\n       1524.0,\n       139.0]},\n     'statistics': {'mean': 416.40504944204235,\n      'stddev': 2.967704894550985,\n      'maximum': 423.60419320175424,\n      'minimum': 411.7429234611336,\n      'valid_percent': 0.00048091720529393656}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.3125, -90.25],\n      [179.6875, -90.25],\n      [179.6875, 90.25],\n      [-180.3125, 90.25],\n      [-180.3125, -90.25]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.625, 0.0, -180.3125, 0.0, -0.5, 90.25, 0.0, 0.0, 1.0]},\n  'xco2prec': {'href': 's3://ghgc-data-store/oco2geos-co2-daygrid-v10r/oco2_GEOS_XCO2PREC_L3CO2_day_B10206Ar_20220228.tif',\n   'type': 'image/tiff; application=geotiff',\n   'roles': ['data', 'layer'],\n   'title': 'Average Dry-Air Column CO2 Precision (XCO2PREC)',\n   'proj:bbox': [-180.3125, -90.25, 179.6875, 90.25],\n   'proj:epsg': 4326.0,\n   'proj:shape': [361.0, 576.0],\n   'description': 'Random errors for daily dry air column-averaged mole fractions of carbon dioxide calculated using a posteriori diagnostics.',\n   'raster:bands': [{'scale': 1.0,\n     'offset': 0.0,\n     'sampling': 'area',\n     'data_type': 'float64',\n     'histogram': {'max': 1.0,\n      'min': 0.09999999999999999,\n      'count': 11.0,\n      'buckets': [73789.0,\n       19836.0,\n       7943.0,\n       4684.0,\n       3634.0,\n       3060.0,\n       3094.0,\n       3093.0,\n       3814.0,\n       84989.0]},\n     'statistics': {'mean': 0.5499856972588942,\n      'stddev': 0.4024318718400779,\n      'maximum': 1.0,\n      'minimum': 0.09999999999999999,\n      'valid_percent': 0.00048091720529393656}}],\n   'proj:geometry': {'type': 'Polygon',\n    'coordinates': [[[-180.3125, -90.25],\n      [179.6875, -90.25],\n      [179.6875, 90.25],\n      [-180.3125, 90.25],\n      [-180.3125, -90.25]]]},\n   'proj:projjson': {'id': {'code': 4326.0, 'authority': 'EPSG'},\n    'name': 'WGS 84',\n    'type': 'GeographicCRS',\n    'datum': {'name': 'World Geodetic System 1984',\n     'type': 'GeodeticReferenceFrame',\n     'ellipsoid': {'name': 'WGS 84',\n      'semi_major_axis': 6378137.0,\n      'inverse_flattening': 298.257223563}},\n    '$schema': 'https://proj.org/schemas/v0.4/projjson.schema.json',\n    'coordinate_system': {'axis': [{'name': 'Geodetic latitude',\n       'unit': 'degree',\n       'direction': 'north',\n       'abbreviation': 'Lat'},\n      {'name': 'Geodetic longitude',\n       'unit': 'degree',\n       'direction': 'east',\n       'abbreviation': 'Lon'}],\n     'subtype': 'ellipsoidal'}},\n   'proj:transform': [0.625,\n    0.0,\n    -180.3125,\n    0.0,\n    -0.5,\n    90.25,\n    0.0,\n    0.0,\n    1.0]}},\n 'geometry': {'type': 'Polygon',\n  'coordinates': [[[-180.3125, -90.25],\n    [179.6875, -90.25],\n    [179.6875, 90.25],\n    [-180.3125, 90.25],\n    [-180.3125, -90.25]]]},\n 'collection': 'oco2geos-co2-daygrid-v10r',\n 'properties': {'datetime': '2022-02-28T00:00:00+00:00'},\n 'stac_version': '1.0.0',\n 'stac_extensions': ['https://stac-extensions.github.io/raster/v1.1.0/schema.json',\n  'https://stac-extensions.github.io/projection/v1.1.0/schema.json']}\n\n\nBelow, we enter minimum and maximum values to provide our upper and lower bounds in rescale_values.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#exploring-changes-in-column-averaged-xco₂-concentrations-levels-using-the-raster-api",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#exploring-changes-in-column-averaged-xco₂-concentrations-levels-using-the-raster-api",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "Exploring Changes in Column-Averaged XCO₂ Concentrations Levels Using the Raster API",
    "text": "Exploring Changes in Column-Averaged XCO₂ Concentrations Levels Using the Raster API\nIn this notebook, we will explore the temporal impacts of CO₂ emissions. We will visualize the outputs on a map using folium.\n\n# To access the year value from each item more easily, this will let us query more explicitly by year and month (e.g., 2020-02)\nitems = {item[\"properties\"][\"datetime\"]: item for item in items} \nasset_name = \"xco2\" #fossil fuel\n\n\n# Fetching the min and max values for a specific item\nrescale_values = {\"max\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"max\"], \"min\":items[list(items.keys())[0]][\"assets\"][asset_name][\"raster:bands\"][0][\"histogram\"][\"min\"]}\n\nNow, we will pass the item id, collection name, and rescaling_factor to the Raster API endpoint. We will do this twice, once for 2022-02-08 and again for 2022-01-27, so that we can visualize each event independently.\n\ncolor_map = \"magma\"\noco2_1 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[list(items.keys())[0]]['collection']}&item={items[list(items.keys())[0]]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\noco2_1\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=oco2geos-co2-daygrid-v10r&item=oco2geos-co2-daygrid-v10r-20220228&assets=xco2&color_formula=gamma+r+1.05&colormap_name=magma&rescale=411.7429234611336%2C423.60419320175424'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.3125, -90.25, 179.6875, 90.25],\n 'center': [-0.3125, 0.0, 0]}\n\n\n\noco2_2 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[list(items.keys())[1]]['collection']}&item={items[list(items.keys())[1]]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\", \n).json()\noco2_2\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=oco2geos-co2-daygrid-v10r&item=oco2geos-co2-daygrid-v10r-20220227&assets=xco2&color_formula=gamma+r+1.05&colormap_name=magma&rescale=411.7429234611336%2C423.60419320175424'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.3125, -90.25, 179.6875, 90.25],\n 'center': [-0.3125, 0.0, 0]}",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#visualizing-daily-column-averaged-xco₂-concentrations",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#visualizing-daily-column-averaged-xco₂-concentrations",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "Visualizing Daily Column-Averaged XCO₂ Concentrations",
    "text": "Visualizing Daily Column-Averaged XCO₂ Concentrations\n\n# We will import folium to map and folium.plugins to allow mapping side-by-side\nimport folium\nimport folium.plugins\n\n# Set initial zoom and center of map for XCO₂ Layer\n# Centre of map [latitude,longitude]\nmap_ = folium.plugins.DualMap(location=(34, -118), zoom_start=6)\n\n\nmap_layer_2020 = TileLayer(\n    tiles=oco2_1[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.5,\n)\nmap_layer_2020.add_to(map_.m1)\n\nmap_layer_2019 = TileLayer(\n    tiles=oco2_2[\"tiles\"][0],\n    attr=\"GHG\",\n    opacity=0.5,\n)\nmap_layer_2019.add_to(map_.m2)\n\n# visualising the map\nmap_\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#visualizing-the-data-as-a-time-series",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "Visualizing the Data as a Time Series",
    "text": "Visualizing the Data as a Time Series\nWe can now explore the XCO₂ concentrations time series (January 1, 2015 - February 28, 2022) available for the Dallas, Texas area of the U.S. We can plot the data set using the code below:\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(20, 10))\n\n\nplt.plot(\n    df[\"datetime\"],\n    df[\"max\"],\n    color=\"red\",\n    linestyle=\"-\",\n    linewidth=0.5,\n    label=\"CO₂ concentrations\",\n)\n\nplt.legend()\nplt.xlabel(\"Years\")\nplt.ylabel(\"CO2 concentrations ppm\")\nplt.title(\"CO₂ concentrations Values for Texas, Dallas (Jan 2015- Feb 2022)\")\n\nText(0.5, 1.0, 'CO₂ concentrations Values for Texas, Dallas (Jan 2015- Feb 2022)')\n\n\n\n\n\n\n\n\n\n\nprint(items[2][\"properties\"][\"datetime\"])\n\n2022-02-26T00:00:00+00:00\n\n\n\noco2_3 = requests.get(\n    f\"{RASTER_API_URL}/stac/tilejson.json?collection={items[2]['collection']}&item={items[2]['id']}\"\n    f\"&assets={asset_name}\"\n    f\"&color_formula=gamma+r+1.05&colormap_name={color_map}\"\n    f\"&rescale={rescale_values['min']},{rescale_values['max']}\",\n).json()\noco2_3\n\n{'tilejson': '2.2.0',\n 'version': '1.0.0',\n 'scheme': 'xyz',\n 'tiles': ['https://ghg.center/api/raster/stac/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?collection=oco2geos-co2-daygrid-v10r&item=oco2geos-co2-daygrid-v10r-20220226&assets=xco2&color_formula=gamma+r+1.05&colormap_name=magma&rescale=411.7429234611336%2C423.60419320175424'],\n 'minzoom': 0,\n 'maxzoom': 24,\n 'bounds': [-180.3125, -90.25, 179.6875, 90.25],\n 'center': [-0.3125, 0.0, 0]}\n\n\n\n# Use bbox initial zoom and map\n# Set up a map located w/in event bounds\nimport folium\n\naoi_map_bbox = Map(\n    tiles=\"OpenStreetMap\",\n    location=[\n        30,-100\n    ],\n    zoom_start=6.8,\n)\n\nmap_layer = TileLayer(\n    tiles=oco2_3[\"tiles\"][0],\n    attr=\"GHG\", opacity = 0.7\n)\n\nmap_layer.add_to(aoi_map_bbox)\n\naoi_map_bbox\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#summary",
    "href": "user_data_notebooks/oco2geos-co2-daygrid-v10r_User_Notebook.html#summary",
    "title": "OCO-2 GEOS Column CO₂ Concentrations",
    "section": "Summary",
    "text": "Summary\nIn this notebook, we have successfully explored, analyzed, and visualized the STAC collection for OCO-2 GEOS Column CO₂ Concentrations.",
    "crumbs": [
      "Data Usage Notebooks",
      "OCO-2 GEOS Column CO₂ Concentrations"
    ]
  },
  {
    "objectID": "cog_transformation/epa-ch4emission-monthgrid-v2.html",
    "href": "cog_transformation/epa-ch4emission-monthgrid-v2.html",
    "title": "Gridded Anthropogenic Methane Emissions Inventory",
    "section": "",
    "text": "This script was used to transform the Gridded Anthropogenic Methane Emissions Inventory dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nFOLDER_NAME = \"epa_emissions/monthly_scale\"\ns3_folder_name = \"epa-emissions-monthly-scale-factors\"\n\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(FOLDER_NAME):\n    xds = xarray.open_dataset(f\"{FOLDER_NAME}/{name}\", engine=\"netcdf4\")\n    xds = xds.assign_coords(lon=(((xds.lon + 180) % 360) - 180)).sortby(\"lon\")\n    variable = [var for var in xds.data_vars]\n    filename = name.split(\"/ \")[-1]\n    filename_elements = re.split(\"[_ .]\", filename)\n    start_time = datetime(int(filename_elements[-2]), 1, 1)\n\n    for time_increment in range(0, len(xds.time)):\n        for var in variable:\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            data = getattr(xds.isel(time=time_increment), var)\n            data = data.isel(lat=slice(None, None, -1))\n            data.rio.set_spatial_dims(\"lon\", \"lat\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n            date = start_time + relativedelta(months=+time_increment)\n\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements[-1] = date.strftime(\"%Y%m\")\n            filename_elements.insert(2, var)\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(\n                    temp_file.name,\n                    driver=\"COG\",\n                )\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"{s3_folder_name}/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=f\"{s3_folder_name}/metadata.json\",\n    )\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/{s3_folder_name}/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "cog_transformation/lpjwsl-wetlandch4-daygrid-v1.html",
    "href": "cog_transformation/lpjwsl-wetlandch4-daygrid-v1.html",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "",
    "text": "This script was used to transform the Wetland Methane Emissions, LPJ-wsl Model dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nfrom datetime import datetime, timedelta\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nFOLDER_NAME = \"NASA_GSFC_ch4_wetlands_daily\"\ndirectory = \"ch4_wetlands_daily\"\n\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(directory):\n    xds = xarray.open_dataset(\n        f\"{directory}/{name}\", engine=\"netcdf4\", decode_times=False\n    )\n    xds = xds.assign_coords(longitude=(((xds.longitude + 180) % 360) - 180)).sortby(\n        \"longitude\"\n    )\n    variable = [var for var in xds.data_vars]\n    filename = name.split(\"/ \")[-1]\n    filename_elements = re.split(\"[_ .]\", filename)\n    start_time = datetime(int(filename_elements[-2]), 1, 1)\n\n    for time_increment in range(0, len(xds.time)):\n        for var in variable:\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            data = getattr(xds.isel(time=time_increment), var)\n            data = data.isel(latitude=slice(None, None, -1))\n            data = data * 1000\n            data.rio.set_spatial_dims(\"longitude\", \"latitude\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n            date = start_time + timedelta(hours=data.time.item(0))\n\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements[-1] = date.strftime(\"%Y%m%d\")\n            filename_elements.insert(2, var)\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(\n                    temp_file.name,\n                    driver=\"COG\",\n                )\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"{FOLDER_NAME}/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=f\"{FOLDER_NAME}/metadata.json\",\n    )\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/{FOLDER_NAME}/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "cog_transformation/casagfed-carbonflux-monthgrid-v3.html",
    "href": "cog_transformation/casagfed-carbonflux-monthgrid-v3.html",
    "title": "CASA-GFED3 Land Carbon Flux",
    "section": "",
    "text": "Code used to transform CASA-GFED3 Land Carbon Flux data from netcdf to Cloud Optimized Geotiff.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = \"ghgc-data-store-dev\"\ndate_fmt = \"%Y%m\"\n\nfiles_processed = pd.DataFrame(columns=[\"file_name\", \"COGs_created\"])\nfor name in os.listdir(\"geoscarb\"):\n    xds = xarray.open_dataset(\n        f\"geoscarb/{name}\",\n        engine=\"netcdf4\",\n    )\n    xds = xds.assign_coords(\n        longitude=(((xds.longitude + 180) % 360) - 180)\n    ).sortby(\"longitude\")\n    variable = [var for var in xds.data_vars]\n\n    for time_increment in range(0, len(xds.time)):\n        for var in variable[:-1]:\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            data = getattr(xds.isel(time=time_increment), var)\n            data = data.isel(latitude=slice(None, None, -1))\n            data.rio.set_spatial_dims(\"longitude\", \"latitude\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            date = data.time.dt.strftime(date_fmt).item(0)\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements[-1] = date\n            filename_elements.insert(2, var)\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(\n                    temp_file.name,\n                    driver=\"COG\",\n                )\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"GEOS-Carbs/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=\"GEOS-Carbs/metadata.json\",\n    )\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/GEOS-Carbs/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "CASA-GFED3 Land Carbon Flux"
    ]
  },
  {
    "objectID": "cog_transformation/epa-ch4emission-grid-v2express.html",
    "href": "cog_transformation/epa-ch4emission-grid-v2express.html",
    "title": "U.S. Gridded Anthropogenic Methane Emissions Inventory",
    "section": "",
    "text": "This script was used to transform the Gridded Anthropogenic Methane Emissions Inventory monthly dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nfrom datetime import datetime\nimport numpy as np\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nTrue\n\n\n\n# session = boto3.session.Session()\nsession = boto3.Session(\n    aws_access_key_id=os.environ.get(\"AWS_ACCESS_KEY_ID\"),\n    aws_secret_access_key=os.environ.get(\"AWS_SECRET_ACCESS_KEY\"),\n    aws_session_token=os.environ.get(\"AWS_SESSION_TOKEN\"),\n)\ns3_client = session.client(\"s3\")\nbucket_name = \"ghgc-data-store-dev\" # S3 bucket where the COGs are stored after transformation\nFOLDER_NAME = \"../data/epa_emissions_express_extension\"\ns3_folder_name = \"epa_express_extension_Mg_km2_yr\"\n# raw gridded data [molec/cm2/s] * 1/6.022x10^23 [molec/mol] * 16.04x10^-6 [ Mg/mol] * 366 [days/yr] * 1x10^10 [cm2/km2]\n\nfiles_processed = pd.DataFrame(columns=[\"file_name\", \"COGs_created\"])   # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor name in os.listdir(FOLDER_NAME):\n    xds = xarray.open_dataset(f\"{FOLDER_NAME}/{name}\", engine=\"netcdf4\")\n    xds = xds.assign_coords(lon=(((xds.lon + 180) % 360) - 180)).sortby(\"lon\")\n    variable = [var for var in xds.data_vars]\n    filename = name.split(\"/ \")[-1]\n    filename_elements = re.split(\"[_ .]\", filename)\n    start_time = datetime(int(filename_elements[-2]), 1, 1)\n\n    for time_increment in range(0, len(xds.time)):\n        for var in variable:\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            data = getattr(xds.isel(time=time_increment), var)\n            data.values[data.values==0] = np.nan\n            data = data*((1/(6.022*pow(10,23)))*(16.04*pow(10,-6))*366*pow(10,10)*86400)\n            data = data.fillna(-9999)\n            data = data.isel(lat=slice(None, None, -1))\n            data.rio.set_spatial_dims(\"lon\", \"lat\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements[-1] = start_time.strftime(\"%Y\")\n            filename_elements.insert(2, var)\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(\n                    temp_file.name,\n                    driver=\"COG\",\n                )\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"{s3_folder_name}/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=f\"{s3_folder_name}/metadata.json\",\n    )\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/{s3_folder_name}/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2015.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2020.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2014.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2013.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2017.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2016.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2012.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2019.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Mobile_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1A_Combustion_Stationary_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Abandoned_Coal_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Surface_Coal_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B1a_Underground_Coal_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Exploration_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Production_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Refining_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2a_Petroleum_Systems_Transport_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2ab_Abandoned_Oil_Gas_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Distribution_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Exploration_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Processing_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_Production_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_1B2b_Natural_Gas_TransmissionStorage_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2B8_Industry_Petrochemical_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_2C2_Industry_Ferroalloy_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3A_Enteric_Fermentation_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3B_Manure_Management_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3C_Rice_Cultivation_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_3F_Field_Burning_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_Industrial_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5A1_Landfills_MSW_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5B1_Composting_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Domestic_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_5D_Wastewater_Treatment_Industrial_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_emi_ch4_Supp_1B2b_PostMeter_Gridded_GHGI_Methane_v2_2018.tif\nGenerated and saved COG: Express_Extension_grid_cell_area_Gridded_GHGI_Methane_v2_2018.tif\nDone generating COGs\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "U.S. Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "cog_transformation/sedac-popdensity-yeargrid5yr-v4.11.html",
    "href": "cog_transformation/sedac-popdensity-yeargrid5yr-v4.11.html",
    "title": "SEDAC Gridded World Population Data",
    "section": "",
    "text": "This script was used to transform SEDAC Gridded World Population Data from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\n\nimport tempfile\nimport boto3\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\n\nfold_names = os.listdir(\"gpw\")\n\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\n\n# Reading the raw netCDF files from local machine\nfor fol_ in fold_names:\n    for name in os.listdir(f\"gpw/{fol_}\"):\n        if name.endswith(\".tif\"):\n            xds = xarray.open_dataarray(f\"gpw/{fol_}/{name}\")\n\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            # # insert date of generated COG into filename\n            filename_elements.pop()\n            filename_elements.append(filename_elements[-3])\n\n            xds.rio.set_spatial_dims(\"x\", \"y\", inplace=True)\n            xds.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                xds.rio.to_raster(temp_file.name, driver=\"COG\")\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"gridded_population_cog/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/gridded_population_cog/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "SEDAC Gridded World Population Data"
    ]
  },
  {
    "objectID": "cog_transformation/oco2-mip-co2budget-yeargrid-v1.html",
    "href": "cog_transformation/oco2-mip-co2budget-yeargrid-v1.html",
    "title": "OCO-2 MIP Top-Down CO₂ Budgets",
    "section": "",
    "text": "This script was used to transform the OCO-2 MIP Top-Down CO₂ Budgets dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nimport rasterio\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\nbucket_name = \"ghgc-data-store-dev\" # S3 bucket where the COGs are to be stored\nyear_ = datetime(2015, 1, 1)    # Initialize the starting date time of the dataset.\n\nCOG_PROFILE = {\"driver\": \"COG\", \"compress\": \"DEFLATE\"}\n\n# Reading the raw netCDF files from local machine\nfiles_processed = pd.DataFrame(columns=[\"file_name\", \"COGs_created\"])   # A dataframe to keep track of the files that are converted into COGs\nfor name in os.listdir(\"new_data\"):\n    ds = xarray.open_dataset(\n        f\"new_data/{name}\",\n        engine=\"netcdf4\",\n    )\n    ds = ds.rename({\"latitude\": \"lat\", \"longitude\": \"lon\"})\n    # assign coords from dimensions\n    ds = ds.assign_coords(lon=(((ds.lon + 180) % 360) - 180)).sortby(\"lon\")\n    ds = ds.assign_coords(lat=list(ds.lat))\n\n    variable = [var for var in ds.data_vars]\n\n    for time_increment in range(0, len(ds.year)):\n        for var in variable[2:]:\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            try:\n                data = ds[var].sel(year=time_increment)\n                date = year_ + relativedelta(years=+time_increment)\n                filename_elements[-1] = date.strftime(\"%Y\")\n                # # insert date of generated COG into filename\n                filename_elements.insert(2, var)\n                cog_filename = \"_\".join(filename_elements)\n                # # add extension\n                cog_filename = f\"{cog_filename}.tif\"\n            except KeyError:\n                data = ds[var]\n                date = year_ + relativedelta(years=+(len(ds.year) - 1))\n                filename_elements.pop()\n                filename_elements.append(year_.strftime(\"%Y\"))\n                filename_elements.append(date.strftime(\"%Y\"))\n                filename_elements.insert(2, var)\n                cog_filename = \"_\".join(filename_elements)\n                # # add extension\n                cog_filename = f\"{cog_filename}.tif\"\n\n            data = data.reindex(lat=list(reversed(data.lat)))\n\n            data.rio.set_spatial_dims(\"lon\", \"lat\")\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            # generate COG\n            COG_PROFILE = {\"driver\": \"COG\", \"compress\": \"DEFLATE\"}\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(temp_file.name, **COG_PROFILE)\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"ceos_co2_flux/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n# creating the csv file with the names of files transformed.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/ceos_co2_flux/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "OCO-2 MIP Top-Down CO₂ Budgets"
    ]
  },
  {
    "objectID": "cog_transformation/eccodarwin-co2flux-monthgrid-v5.html",
    "href": "cog_transformation/eccodarwin-co2flux-monthgrid-v5.html",
    "title": "Air-Sea CO₂ Flux, ECCO-Darwin Model v5",
    "section": "",
    "text": "This script was used to transform the Air-Sea CO₂ Flux, ECCO-Darwin Mode dataset from netCDF to Cloud Optimized GeoTIFF (COG) format for display in the Greenhouse Gas (GHG) Center.\n\nimport os\nimport xarray\nimport re\nimport pandas as pd\nimport json\nimport tempfile\nimport boto3\nimport rasterio\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n\nsession = boto3.session.Session()\ns3_client = session.client(\"s3\")\n\nbucket_name = (\n    \"ghgc-data-store-dev\"  # S3 bucket where the COGs are stored after transformation\n)\nFOLDER_NAME = \"ecco-darwin\"\ns3_fol_name = \"ecco_darwin\"\n\n# Reading the raw netCDF files from local machine\nfiles_processed = pd.DataFrame(\n    columns=[\"file_name\", \"COGs_created\"]\n)  # A dataframe to keep track of the files that we have transformed into COGs\nfor name in os.listdir(FOLDER_NAME):\n    xds = xarray.open_dataset(\n        f\"{FOLDER_NAME}/{name}\",\n        engine=\"netcdf4\",\n    )\n    xds = xds.rename({\"y\": \"latitude\", \"x\": \"longitude\"})\n    xds = xds.assign_coords(longitude=((xds.longitude / 1440) * 360) - 180).sortby(\n        \"longitude\"\n    )\n    xds = xds.assign_coords(latitude=((xds.latitude / 721) * 180) - 90).sortby(\n        \"latitude\"\n    )\n\n    variable = [var for var in xds.data_vars]\n\n    for time_increment in xds.time.values:\n        for var in variable[2:]:\n            filename = name.split(\"/ \")[-1]\n            filename_elements = re.split(\"[_ .]\", filename)\n            data = xds[var]\n\n            data = data.reindex(latitude=list(reversed(data.latitude)))\n            data.rio.set_spatial_dims(\"longitude\", \"latitude\", inplace=True)\n            data.rio.write_crs(\"epsg:4326\", inplace=True)\n\n            # generate COG\n            COG_PROFILE = {\"driver\": \"COG\", \"compress\": \"DEFLATE\"}\n\n            filename_elements.pop()\n            filename_elements[-1] = filename_elements[-2] + filename_elements[-1]\n            filename_elements.pop(-2)\n            # # insert date of generated COG into filename\n            cog_filename = \"_\".join(filename_elements)\n            # # add extension\n            cog_filename = f\"{cog_filename}.tif\"\n\n            with tempfile.NamedTemporaryFile() as temp_file:\n                data.rio.to_raster(temp_file.name, **COG_PROFILE)\n                s3_client.upload_file(\n                    Filename=temp_file.name,\n                    Bucket=bucket_name,\n                    Key=f\"{s3_fol_name}/{cog_filename}\",\n                )\n\n            files_processed = files_processed._append(\n                {\"file_name\": name, \"COGs_created\": cog_filename},\n                ignore_index=True,\n            )\n            del data\n\n            print(f\"Generated and saved COG: {cog_filename}\")\n\n# Generate the json file with the metadata that is present in the netCDF files.\nwith tempfile.NamedTemporaryFile(mode=\"w+\") as fp:\n    json.dump(xds.attrs, fp)\n    json.dump({\"data_dimensions\": dict(xds.dims)}, fp)\n    json.dump({\"data_variables\": list(xds.data_vars)}, fp)\n    fp.flush()\n\n    s3_client.upload_file(\n        Filename=fp.name,\n        Bucket=bucket_name,\n        Key=\"s3_fol_name/metadata.json\",\n    )\n\n# A csv file to store the names of all the files converted.\nfiles_processed.to_csv(\n    f\"s3://{bucket_name}/{s3_fol_name}/files_converted.csv\",\n)\nprint(\"Done generating COGs\")\n\n\n\n\n Back to top",
    "crumbs": [
      "Data Transformation Documentation",
      "Air-Sea CO₂ Flux, ECCO-Darwin Model v5"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "U.S. Greenhouse Gas Center: Documentation",
    "section": "",
    "text": "The U.S. Greenhouse Gas (GHG) Center provides a cloud-based system for exploring and analyzing U.S. government and other curated greenhouse gas datasets.\nOn this site, you can find the technical documentation for the services the center provides, how to load the datasets, and how the datasets were transformed from their source formats (eg. netCDF, HDF, etc.) into cloud-optimized formats that enable efficient cloud data access and visualization.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "U.S. Greenhouse Gas Center: Documentation",
    "section": "",
    "text": "The U.S. Greenhouse Gas (GHG) Center provides a cloud-based system for exploring and analyzing U.S. government and other curated greenhouse gas datasets.\nOn this site, you can find the technical documentation for the services the center provides, how to load the datasets, and how the datasets were transformed from their source formats (eg. netCDF, HDF, etc.) into cloud-optimized formats that enable efficient cloud data access and visualization.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "U.S. Greenhouse Gas Center: Documentation",
    "section": "Contents",
    "text": "Contents\n\nServices provided for accessing and analyzing the US GHG Center datasets, such as the JupyterHub environment for interactive computing.\nDataset usage examples, e.g. for the Wetland Methane Emissions from the LPJ-wsl model dataset, that shows how to load the dataset in Python in JupyterHub.\nDataset transformation scripts, such as the CASA-GFED3 Land Carbon Flux dataset.\nData processing and verification reports that openly present the process we used to check and verify that any transformation did not alter the original source data. An example is the CEOS CH₄ budget yearly dataset.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "U.S. Greenhouse Gas Center: Documentation",
    "section": "Contact",
    "text": "Contact\nFor technical help or general questions, please contact the support team using the feedback form.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/epa-ch4emission-grid-v2express_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/epa-ch4emission-grid-v2express_Processing and Verification Report.html",
    "title": "Gridded Anthropogenic Methane Emissions Inventory",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "Gridded Anthropogenic Methane Emissions Inventory"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/sedac-popdensity-yeargrid5yr-v4.11_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/sedac-popdensity-yeargrid5yr-v4.11_Processing and Verification Report.html",
    "title": "SEDAC Gridded World Population Density",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "SEDAC Gridded World Population Density"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/lpjwsl-wetlandch4-grid-v1_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/lpjwsl-wetlandch4-grid-v1_Processing and Verification Report.html",
    "title": "Wetland Methane Emissions, LPJ-wsl Model",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "Wetland Methane Emissions, LPJ-wsl Model"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/odiac-ffco2-monthgrid-v2022_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/odiac-ffco2-monthgrid-v2022_Processing and Verification Report.html",
    "title": "ODIAC Fossil Fuel CO₂ Emissions",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "ODIAC Fossil Fuel CO₂ Emissions"
    ]
  },
  {
    "objectID": "processing_and_verification_reports/gosat-based-ch4budget-yeargrid-v1_Processing and Verification Report.html",
    "href": "processing_and_verification_reports/gosat-based-ch4budget-yeargrid-v1_Processing and Verification Report.html",
    "title": "GOSAT-based Top-down Total and Natural Methane Emissions",
    "section": "",
    "text": "This browser does not support PDFs. Please download the PDF to view it: Download PDF.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Processing and Verification Reports",
      "GOSAT-based Top-down Total and Natural Methane Emissions"
    ]
  },
  {
    "objectID": "services/jupyterhub.html",
    "href": "services/jupyterhub.html",
    "title": "JupyterHub",
    "section": "",
    "text": "The US GHG Center promotes the use of JupyterHub environments for interactive data science. JupyterHub enables you to analyze massive archives of Earth science data in the cloud in an interactive environment that alleviates the complexities of managing compute resources (virtual machines, roles and permissions, etc).\nUsers affiliated with the US GHG Center can get access to a dedicated JupyterHub service, provided in collaboration with 2i2c: hub.ghg.center. Please find instructions for requesting access below.\nIf you are a scientist affiliated with other NASA projects such as VEDA, EIS, and MAAP, you can also keep using the resources provided by these projects. Through the use of open-source technology, we make sure our services are interoperable and exchangeable.",
    "crumbs": [
      "User Services",
      "JupyterHub"
    ]
  },
  {
    "objectID": "services/jupyterhub.html#to-get-us-ghg-center-jupyterhub-access",
    "href": "services/jupyterhub.html#to-get-us-ghg-center-jupyterhub-access",
    "title": "JupyterHub",
    "section": "To Get US GHG Center JupyterHub access:",
    "text": "To Get US GHG Center JupyterHub access:\nThe US GHG Center notebook environment is available to authorized users on an as-need basis. If you are a user affiliated with the US GHG Center, you can gain access by using our Hub Access Request form.\n\nMake sure you have a GitHub Account. Take note of your GitHub username.\nFill out the request form and provide needed information.\nWatch your email for notification of authorization and the invite to join the US GHG Center Hub Access GitHub Team.\nOnce you accept the invitation, you can go to hub.ghg.center and login using your GitHub credentials.",
    "crumbs": [
      "User Services",
      "JupyterHub"
    ]
  },
  {
    "objectID": "services/jupyterhub.html#to-access-user-notebooks",
    "href": "services/jupyterhub.html#to-access-user-notebooks",
    "title": "JupyterHub",
    "section": "To access User Notebooks",
    "text": "To access User Notebooks\nThis site provides Jupyter notebooks showing how to load and analyze Earth data in the interactive cloud computing environment.\nFurther instructions are included in each notebook.\nIf you have any questions, please use the feedback form to contact the US GHG Center user support team.",
    "crumbs": [
      "User Services",
      "JupyterHub"
    ]
  }
]